{
  "contractName": "IPFSProofOfExistenceTestable",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "documentType",
          "type": "string"
        }
      ],
      "name": "LogDocumentStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogFundsWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "checkDocumentsForAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "timeStamp",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "internalType": "struct IPFSProofOfExistence.DocumentReference[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getNumberOfProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "getTotalProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "ipfsHashExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function",
      "constant": true
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_timeStamp",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_documentType",
          "type": "string"
        }
      ],
      "name": "saveProofOfExistence",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function",
      "payable": true
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "documentOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "timeStamp",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "internalType": "struct IPFSProofOfExistence.DocumentReference",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "storeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"name\":\"LogDocumentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"checkDocumentsForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"internalType\":\"struct IPFSProofOfExistence.DocumentReference[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getNumberOfProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"ipfsHashExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentType\",\"type\":\"string\"}],\"name\":\"saveProofOfExistence\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"documentOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"internalType\":\"struct IPFSProofOfExistence.DocumentReference\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"storeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanislav Trenev\",\"details\":\"This contract is entirely for testing purposes, so not use in production\",\"methods\":{\"checkDocumentsForAddress(address)\":{\"params\":{\"ownerAddress\":\"The address of the proof's owner\"},\"returns\":{\"_0\":\"array of proofs\"}},\"getNumberOfProofs(address)\":{\"params\":{\"ownerAddress\":\"The address of the proof's owner\"},\"returns\":{\"_0\":\"number of proofs\"}},\"ipfsHashExists(string)\":{\"params\":{\"ipfsHash\":\"The ipfs hash we are checking\"},\"returns\":{\"_0\":\"boolean if the hash is already stored\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"saveProofOfExistence(string,string,string)\":{\"details\":\"External function which is executed when the contract is not paused\",\"params\":{\"_documentType\":\"The document type of the stored document\",\"_ipfsHash\":\"The ipfs hash of the stored document\",\"_timeStamp\":\"The timestamp of the stored document\"}},\"storeProof(address,(string,string,string))\":{\"details\":\"Function used only for testing purposes\",\"params\":{\"documentOwner\":\"The address of the document owner\",\"proof\":\"Struct entity containing the documentOwner address, ipfs hash and document type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBalance(uint256)\":{\"params\":{\"withdrawAmount\":\"The amount to withdraw by the owner of the contract\"}}},\"title\":\"A contract which inherits from IPFSProofOfExistence contract\"},\"userdoc\":{\"methods\":{\"checkDocumentsForAddress(address)\":{\"notice\":\"View function to get stored documents for specific address\"},\"getNumberOfProofs(address)\":{\"notice\":\"View function to get number of proofs for specific address\"},\"getTotalProofs()\":{\"notice\":\"View function to get the total number of proofs stored by the contract\"},\"ipfsHashExists(string)\":{\"notice\":\"Function to check whether an ipfs hash already exists\"},\"pause()\":{\"notice\":\"Function to pause the contract\"},\"saveProofOfExistence(string,string,string)\":{\"notice\":\"Payable function which is called externaly to store a proof. The sender should send ether along with the transaction\"},\"storeProof(address,(string,string,string))\":{\"notice\":\"Function which performs the actual storing of proofs in the state and logs an event\"},\"unpause()\":{\"notice\":\"Function to unpause the contract\"},\"withdrawBalance(uint256)\":{\"notice\":\"Function to withdraw ether stored in the contract, agreggated from fees\"}},\"notice\":\"The contract exposes a testable public function, which is internal in the original contract\"}},\"settings\":{\"compilationTarget\":{\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol\":\"IPFSProofOfExistenceTestable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol\":{\"keccak256\":\"0xd085f36df499768a6c9ebbd600ff72aa87eda35180e03cb2c79cad670522c81c\",\"urls\":[\"bzz-raw://b30b0b81c726f8b8ed86c01969f866abf7ec101df68fa55ba958fd7867fc760a\",\"dweb:/ipfs/QmfVfLrgLWTBtTNy4XpVmeEpYaxPDNj4QrSX4HuSLriQWv\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol\":{\"keccak256\":\"0x8b6478112b2b685c88745cd39ae81d6287d404d5be39a858dfbd36002a0d6f28\",\"urls\":[\"bzz-raw://ebb7e8ba1405e783d3bb38f8169c4766b81b680ed74ea9b8c7184a159c6168da\",\"dweb:/ipfs/QmRbnBPp5HSB49w6LhqTUZXrENQDKZM3jXLurX8edVtWX4\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/node_modules/@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"urls\":[\"bzz-raw://cb57a28e189cd8b05748db44bdd51d608e6f1364dd1b35ad921e1bc82c10631e\",\"dweb:/ipfs/QmaWWTBbVu2pRR9XUbE4iC159NoP59cRF9ZJwhf4ghFN9i\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"urls\":[\"bzz-raw://7f8d45329fecbf0836ad7543330c3ecd0f8d0ffa42d4016278c3eb2215fdcdfe\",\"dweb:/ipfs/QmXWLT7GcnHtA5NiD6MFi2CV3EWJY4wv5mLNnypqYDrxL3\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/node_modules/@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"urls\":[\"bzz-raw://946fe57f3b935f0f4a41345b3eedb617c30912ba5e802bd6b430b394114048ab\",\"dweb:/ipfs/QmRVgUK6yHgqiVWoFn51aUGYejR8romW2ZqwVvSFMnhnJW\"]}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5060008060006101000a81548160ff02191690831515021790555060006100466100ea60201b60201c565b905080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100f2565b600033905090565b611e14806101016000396000f3fe6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063da76d5cd11610059578063da76d5cd14610244578063e757da121461026d578063ea15c38514610296578063f2fde38b146102b2576100c2565b80638da5cb5b146101b15780639b1bc0c9146101dc578063d6fc355f14610207576100c2565b80631a2110e6146100c75780633f4ba83a146101045780635c975abb1461011b578063715018a6146101465780637182ca471461015d5780638456cb591461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036036100e991908101906115f2565b6102db565b6040516100fb9190611ae6565b60405180910390f35b34801561011057600080fd5b50610119610310565b005b34801561012757600080fd5b506101306103b1565b60405161013d9190611ae6565b60405180910390f35b34801561015257600080fd5b5061015b6103c7565b005b34801561016957600080fd5b50610184600480360361017f91908101906114d1565b61051e565b6040516101919190611bc3565b60405180910390f35b3480156101a657600080fd5b506101af610567565b005b3480156101bd57600080fd5b506101c6610608565b6040516101d39190611a20565b60405180910390f35b3480156101e857600080fd5b506101f1610631565b6040516101fe9190611bc3565b60405180910390f35b34801561021357600080fd5b5061022e600480360361022991908101906114d1565b61063b565b60405161023b9190611ac4565b60405180910390f35b34801561025057600080fd5b5061026b60048036036102669190810190611633565b61090e565b005b34801561027957600080fd5b50610294600480360361028f91908101906114fa565b610a50565b005b6102b060048036036102ab919081019061154e565b610a5e565b005b3480156102be57600080fd5b506102d960048036036102d491908101906114d1565b610c38565b005b60006006826040516102ed9190611a09565b908152602001604051809103902060009054906101000a900460ff169050919050565b610318610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90611ba3565b60405180910390fd5b6103af610e07565b565b60008060009054906101000a900460ff16905090565b6103cf610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045590611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61056f610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611ba3565b60405180910390fd5b610606610eaf565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b60606000809054906101000a900460ff161561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b83565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109035783829060005260206000209060030201604051806060016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108eb5780601f106108c0576101008083540402835291602001916108eb565b820191906000526020600020905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050815260200190600101906106eb565b505050509050919050565b610916610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611ba3565b60405180910390fd5b600081116109b257600080fd5b6109c781600354610f5890919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b507f734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb3382604051610a45929190611a56565b60405180910390a150565b610a5a8282610fa2565b5050565b6000809054906101000a900460ff1615610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611b83565b60405180910390fd5b610ab5611247565b604051806060016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600254341015610bad57600080fd5b60001515610bfe86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102db565b151514610c0a57600080fd5b610c1f3460035461119790919063ffffffff16565b600381905550610c2f3382610fa2565b50505050505050565b610c40610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690611b43565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000809054906101000a900460ff16610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90611b23565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e98610dff565b604051610ea59190611a3b565b60405180910390a1565b6000809054906101000a900460ff1615610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef590611b83565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f41610dff565b604051610f4e9190611a3b565b60405180910390a1565b6000610f9a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ec565b905092915050565b610fb76001805461119790919063ffffffff16565b6001819055506110106001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119790919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906110d8929190611268565b5060208201518160010190805190602001906110f5929190611268565b506040820151816002019080519060200190611112929190611268565b50505060016006826020015160405161112b91906119f2565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892828260200151836040015160405161118b93929190611a7f565b60405180910390a15050565b6000808284019050838110156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990611b63565b60405180910390fd5b8091505092915050565b6000838311158290611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b9190611b01565b60405180910390fd5b5060008385039050809150509392505050565b60405180606001604052806060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112a957805160ff19168380011785556112d7565b828001600101855582156112d7579182015b828111156112d65782518255916020019190600101906112bb565b5b5090506112e491906112e8565b5090565b61130a91905b808211156113065760008160009055506001016112ee565b5090565b90565b60008135905061131c81611db0565b92915050565b60008083601f84011261133457600080fd5b8235905067ffffffffffffffff81111561134d57600080fd5b60208301915083600182028301111561136557600080fd5b9250929050565b600082601f83011261137d57600080fd5b813561139061138b82611c0b565b611bde565b915080825260208301602083018583830111156113ac57600080fd5b6113b7838284611d5d565b50505092915050565b600082601f8301126113d157600080fd5b81356113e46113df82611c37565b611bde565b9150808252602083016020830185838301111561140057600080fd5b61140b838284611d5d565b50505092915050565b60006060828403121561142657600080fd5b6114306060611bde565b9050600082013567ffffffffffffffff81111561144c57600080fd5b6114588482850161136c565b600083015250602082013567ffffffffffffffff81111561147857600080fd5b6114848482850161136c565b602083015250604082013567ffffffffffffffff8111156114a457600080fd5b6114b08482850161136c565b60408301525092915050565b6000813590506114cb81611dc7565b92915050565b6000602082840312156114e357600080fd5b60006114f18482850161130d565b91505092915050565b6000806040838503121561150d57600080fd5b600061151b8582860161130d565b925050602083013567ffffffffffffffff81111561153857600080fd5b61154485828601611414565b9150509250929050565b6000806000806000806060878903121561156757600080fd5b600087013567ffffffffffffffff81111561158157600080fd5b61158d89828a01611322565b9650965050602087013567ffffffffffffffff8111156115ac57600080fd5b6115b889828a01611322565b9450945050604087013567ffffffffffffffff8111156115d757600080fd5b6115e389828a01611322565b92509250509295509295509295565b60006020828403121561160457600080fd5b600082013567ffffffffffffffff81111561161e57600080fd5b61162a848285016113c0565b91505092915050565b60006020828403121561164557600080fd5b6000611653848285016114bc565b91505092915050565b60006116688383611985565b905092915050565b61167981611d27565b82525050565b61168881611cdf565b82525050565b600061169982611c73565b6116a38185611ca1565b9350836020820285016116b585611c63565b8060005b858110156116f157848403895281516116d2858261165c565b94506116dd83611c94565b925060208a019950506001810190506116b9565b50829750879550505050505092915050565b61170c81611cf1565b82525050565b600061171d82611c89565b6117278185611cc3565b9350611737818560208601611d6c565b61174081611d9f565b840191505092915050565b600061175682611c89565b6117608185611cd4565b9350611770818560208601611d6c565b80840191505092915050565b600061178782611c7e565b6117918185611cb2565b93506117a1818560208601611d6c565b6117aa81611d9f565b840191505092915050565b60006117c082611c7e565b6117ca8185611cc3565b93506117da818560208601611d6c565b6117e381611d9f565b840191505092915050565b60006117f982611c7e565b6118038185611cd4565b9350611813818560208601611d6c565b80840191505092915050565b600061182c601483611cc3565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061186c602683611cc3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118d2601b83611cc3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611912601083611cc3565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611952602083611cc3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060608301600083015184820360008601526119a2828261177c565b915050602083015184820360208601526119bc828261177c565b915050604083015184820360408601526119d6828261177c565b9150508091505092915050565b6119ec81611d1d565b82525050565b60006119fe82846117ee565b915081905092915050565b6000611a15828461174b565b915081905092915050565b6000602082019050611a35600083018461167f565b92915050565b6000602082019050611a506000830184611670565b92915050565b6000604082019050611a6b6000830185611670565b611a7860208301846119e3565b9392505050565b6000606082019050611a94600083018661167f565b8181036020830152611aa681856117b5565b90508181036040830152611aba81846117b5565b9050949350505050565b60006020820190508181036000830152611ade818461168e565b905092915050565b6000602082019050611afb6000830184611703565b92915050565b60006020820190508181036000830152611b1b8184611712565b905092915050565b60006020820190508181036000830152611b3c8161181f565b9050919050565b60006020820190508181036000830152611b5c8161185f565b9050919050565b60006020820190508181036000830152611b7c816118c5565b9050919050565b60006020820190508181036000830152611b9c81611905565b9050919050565b60006020820190508181036000830152611bbc81611945565b9050919050565b6000602082019050611bd860008301846119e3565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611c0157600080fd5b8060405250919050565b600067ffffffffffffffff821115611c2257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611c4e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cea82611cfd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d3282611d39565b9050919050565b6000611d4482611d4b565b9050919050565b6000611d5682611cfd565b9050919050565b82818337600083830152505050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b611db981611cdf565b8114611dc457600080fd5b50565b611dd081611d1d565b8114611ddb57600080fd5b5056fea2646970667358221220e15d581979c0fc6bbcdf816d3e0fcd61dc8848a26154d43ae5e8894c5ec36f8e64736f6c63430006000033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063da76d5cd11610059578063da76d5cd14610244578063e757da121461026d578063ea15c38514610296578063f2fde38b146102b2576100c2565b80638da5cb5b146101b15780639b1bc0c9146101dc578063d6fc355f14610207576100c2565b80631a2110e6146100c75780633f4ba83a146101045780635c975abb1461011b578063715018a6146101465780637182ca471461015d5780638456cb591461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036036100e991908101906115f2565b6102db565b6040516100fb9190611ae6565b60405180910390f35b34801561011057600080fd5b50610119610310565b005b34801561012757600080fd5b506101306103b1565b60405161013d9190611ae6565b60405180910390f35b34801561015257600080fd5b5061015b6103c7565b005b34801561016957600080fd5b50610184600480360361017f91908101906114d1565b61051e565b6040516101919190611bc3565b60405180910390f35b3480156101a657600080fd5b506101af610567565b005b3480156101bd57600080fd5b506101c6610608565b6040516101d39190611a20565b60405180910390f35b3480156101e857600080fd5b506101f1610631565b6040516101fe9190611bc3565b60405180910390f35b34801561021357600080fd5b5061022e600480360361022991908101906114d1565b61063b565b60405161023b9190611ac4565b60405180910390f35b34801561025057600080fd5b5061026b60048036036102669190810190611633565b61090e565b005b34801561027957600080fd5b50610294600480360361028f91908101906114fa565b610a50565b005b6102b060048036036102ab919081019061154e565b610a5e565b005b3480156102be57600080fd5b506102d960048036036102d491908101906114d1565b610c38565b005b60006006826040516102ed9190611a09565b908152602001604051809103902060009054906101000a900460ff169050919050565b610318610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90611ba3565b60405180910390fd5b6103af610e07565b565b60008060009054906101000a900460ff16905090565b6103cf610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045590611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61056f610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611ba3565b60405180910390fd5b610606610eaf565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b60606000809054906101000a900460ff161561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b83565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109035783829060005260206000209060030201604051806060016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108eb5780601f106108c0576101008083540402835291602001916108eb565b820191906000526020600020905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050815260200190600101906106eb565b505050509050919050565b610916610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611ba3565b60405180910390fd5b600081116109b257600080fd5b6109c781600354610f5890919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b507f734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb3382604051610a45929190611a56565b60405180910390a150565b610a5a8282610fa2565b5050565b6000809054906101000a900460ff1615610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611b83565b60405180910390fd5b610ab5611247565b604051806060016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600254341015610bad57600080fd5b60001515610bfe86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102db565b151514610c0a57600080fd5b610c1f3460035461119790919063ffffffff16565b600381905550610c2f3382610fa2565b50505050505050565b610c40610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690611b43565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000809054906101000a900460ff16610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90611b23565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e98610dff565b604051610ea59190611a3b565b60405180910390a1565b6000809054906101000a900460ff1615610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef590611b83565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f41610dff565b604051610f4e9190611a3b565b60405180910390a1565b6000610f9a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ec565b905092915050565b610fb76001805461119790919063ffffffff16565b6001819055506110106001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119790919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906110d8929190611268565b5060208201518160010190805190602001906110f5929190611268565b506040820151816002019080519060200190611112929190611268565b50505060016006826020015160405161112b91906119f2565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892828260200151836040015160405161118b93929190611a7f565b60405180910390a15050565b6000808284019050838110156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990611b63565b60405180910390fd5b8091505092915050565b6000838311158290611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b9190611b01565b60405180910390fd5b5060008385039050809150509392505050565b60405180606001604052806060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112a957805160ff19168380011785556112d7565b828001600101855582156112d7579182015b828111156112d65782518255916020019190600101906112bb565b5b5090506112e491906112e8565b5090565b61130a91905b808211156113065760008160009055506001016112ee565b5090565b90565b60008135905061131c81611db0565b92915050565b60008083601f84011261133457600080fd5b8235905067ffffffffffffffff81111561134d57600080fd5b60208301915083600182028301111561136557600080fd5b9250929050565b600082601f83011261137d57600080fd5b813561139061138b82611c0b565b611bde565b915080825260208301602083018583830111156113ac57600080fd5b6113b7838284611d5d565b50505092915050565b600082601f8301126113d157600080fd5b81356113e46113df82611c37565b611bde565b9150808252602083016020830185838301111561140057600080fd5b61140b838284611d5d565b50505092915050565b60006060828403121561142657600080fd5b6114306060611bde565b9050600082013567ffffffffffffffff81111561144c57600080fd5b6114588482850161136c565b600083015250602082013567ffffffffffffffff81111561147857600080fd5b6114848482850161136c565b602083015250604082013567ffffffffffffffff8111156114a457600080fd5b6114b08482850161136c565b60408301525092915050565b6000813590506114cb81611dc7565b92915050565b6000602082840312156114e357600080fd5b60006114f18482850161130d565b91505092915050565b6000806040838503121561150d57600080fd5b600061151b8582860161130d565b925050602083013567ffffffffffffffff81111561153857600080fd5b61154485828601611414565b9150509250929050565b6000806000806000806060878903121561156757600080fd5b600087013567ffffffffffffffff81111561158157600080fd5b61158d89828a01611322565b9650965050602087013567ffffffffffffffff8111156115ac57600080fd5b6115b889828a01611322565b9450945050604087013567ffffffffffffffff8111156115d757600080fd5b6115e389828a01611322565b92509250509295509295509295565b60006020828403121561160457600080fd5b600082013567ffffffffffffffff81111561161e57600080fd5b61162a848285016113c0565b91505092915050565b60006020828403121561164557600080fd5b6000611653848285016114bc565b91505092915050565b60006116688383611985565b905092915050565b61167981611d27565b82525050565b61168881611cdf565b82525050565b600061169982611c73565b6116a38185611ca1565b9350836020820285016116b585611c63565b8060005b858110156116f157848403895281516116d2858261165c565b94506116dd83611c94565b925060208a019950506001810190506116b9565b50829750879550505050505092915050565b61170c81611cf1565b82525050565b600061171d82611c89565b6117278185611cc3565b9350611737818560208601611d6c565b61174081611d9f565b840191505092915050565b600061175682611c89565b6117608185611cd4565b9350611770818560208601611d6c565b80840191505092915050565b600061178782611c7e565b6117918185611cb2565b93506117a1818560208601611d6c565b6117aa81611d9f565b840191505092915050565b60006117c082611c7e565b6117ca8185611cc3565b93506117da818560208601611d6c565b6117e381611d9f565b840191505092915050565b60006117f982611c7e565b6118038185611cd4565b9350611813818560208601611d6c565b80840191505092915050565b600061182c601483611cc3565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061186c602683611cc3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118d2601b83611cc3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611912601083611cc3565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611952602083611cc3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060608301600083015184820360008601526119a2828261177c565b915050602083015184820360208601526119bc828261177c565b915050604083015184820360408601526119d6828261177c565b9150508091505092915050565b6119ec81611d1d565b82525050565b60006119fe82846117ee565b915081905092915050565b6000611a15828461174b565b915081905092915050565b6000602082019050611a35600083018461167f565b92915050565b6000602082019050611a506000830184611670565b92915050565b6000604082019050611a6b6000830185611670565b611a7860208301846119e3565b9392505050565b6000606082019050611a94600083018661167f565b8181036020830152611aa681856117b5565b90508181036040830152611aba81846117b5565b9050949350505050565b60006020820190508181036000830152611ade818461168e565b905092915050565b6000602082019050611afb6000830184611703565b92915050565b60006020820190508181036000830152611b1b8184611712565b905092915050565b60006020820190508181036000830152611b3c8161181f565b9050919050565b60006020820190508181036000830152611b5c8161185f565b9050919050565b60006020820190508181036000830152611b7c816118c5565b9050919050565b60006020820190508181036000830152611b9c81611905565b9050919050565b60006020820190508181036000830152611bbc81611945565b9050919050565b6000602082019050611bd860008301846119e3565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611c0157600080fd5b8060405250919050565b600067ffffffffffffffff821115611c2257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611c4e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cea82611cfd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d3282611d39565b9050919050565b6000611d4482611d4b565b9050919050565b6000611d5682611cfd565b9050919050565b82818337600083830152505050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b611db981611cdf565b8114611dc457600080fd5b50565b611dd081611d1d565b8114611ddb57600080fd5b5056fea2646970667358221220e15d581979c0fc6bbcdf816d3e0fcd61dc8848a26154d43ae5e8894c5ec36f8e64736f6c63430006000033",
  "sourceMap": "430:560:1:-:0;;;915:16:0;887:44;;498:23:1;8:9:-1;5:2;;;30:1;27;20:12;5:2;498:23:1;950:5:6;940:7;;:15;;;;;;;;;;;;;;;;;;882:17:4;902:12;:10;;;:12;;:::i;:::-;882:32;;933:9;924:6;;:18;;;;;;;;;;;;;;;;;;990:9;957:43;;986:1;957:43;;;;;;;;;;;;848:159;430:560:1;;598:104:3;651:15;685:10;678:17;;598:104;:::o;430:560:1:-;;;;;;;",
  "deployedSourceMap": "430:560:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4454:119:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4454:119:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3654:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3654:63:0;;;:::i;:::-;;1057:76:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1057:76:6;;;:::i;:::-;;;;;;;;;;;;;;;;1706:145:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1706:145:4;;;:::i;:::-;;3892:155:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3892:155:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3540:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3540:59:0;;;:::i;:::-;;1083:77:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1083:77:4;;;:::i;:::-;;;;;;;;;;;;;;;;4179:91:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4179:91:0;;;:::i;:::-;;;;;;;;;;;;;;;;3288:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3288:199:0;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4749:281;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4749:281:0;;;;;;;;;;;;;;;;:::i;:::-;;844:144:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;844:144:1;;;;;;;;;;;;;;;;:::i;:::-;;2540:574:0;;;;;;;;;;;;;;;;:::i;:::-;;2000:240:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2000:240:4;;;;;;;;;;;;;;;;:::i;:::-;;4454:119:0;4523:4;4546:10;4557:8;4546:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4539:27;;4454:119;;;:::o;3654:63::-;1297:12:4;:10;:12::i;:::-;1287:22;;:6;;;;;;;;;;;:22;;;1279:67;;;;;;;;;;;;;;;;;;;;;;3700:10:0::1;:8;:10::i;:::-;3654:63::o:0;1057:76:6:-;1096:4;1119:7;;;;;;;;;;;1112:14;;1057:76;:::o;1706:145:4:-;1297:12;:10;:12::i;:::-;1287:22;;:6;;;;;;;;;;;:22;;;1279:67;;;;;;;;;;;;;;;;;;;;;;1812:1:::1;1775:40;;1796:6;;;;;;;;;;;1775:40;;;;;;;;;;;;1842:1;1825:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1706:145::o:0;3892:155:0:-;3986:7;4016:10;:24;4027:12;4016:24;;;;;;;;;;;;;;;;4009:31;;3892:155;;;:::o;3540:59::-;1297:12:4;:10;:12::i;:::-;1287:22;;:6;;;;;;;;;;;:22;;;1279:67;;;;;;;;;;;;;;;;;;;;;;3584:8:0::1;:6;:8::i;:::-;3540:59::o:0;1083:77:4:-;1121:7;1147:6;;;;;;;;;;;1140:13;;1083:77;:::o;4179:91:0:-;4226:7;4252:11;;4245:18;;4179:91;:::o;3288:199::-;3411:26;1363:7:6;;;;;;;;;;;1362:8;1354:37;;;;;;;;;;;;;;;;;;;;;;3460:6:0::1;:20;3467:12;3460:20;;;;;;;;;;;;;;;3453:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;3288:199:::0;;;:::o;4749:281::-;1297:12:4;:10;:12::i;:::-;1287:22;;:6;;;;;;;;;;;:22;;;1279:67;;;;;;;;;;;;;;;;;;;;;;4852:1:0::1;4835:14;:18;4827:27;;;::::0;::::1;;4882:35;4902:14;4882:15;;:19;;:35;;;;:::i;:::-;4864:15;:53;;;;4927:10;:19;;:35;4947:14;4927:35;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;4927:35:0;4977:46;4996:10;5008:14;4977:46;;;;;;;;;;;;;;;;4749:281:::0;:::o;844:144:1:-;948:33;960:13;975:5;948:11;:33::i;:::-;844:144;;:::o;2540:574:0:-;1363:7:6;;;;;;;;;;;1362:8;1354:37;;;;;;;;;;;;;;;;;;;;;;2727:38:0::1;;:::i;:::-;2768:138;;;;;;;;2811:10;;2768:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2768:138:0;;;;;;;;;;2845:9;;2768:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2768:138:0;;;;;;;;;;2882:13;;2768:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2768:138:0;;;;;;;;::::0;2727:179:::1;;2938:9;;2925;:22;;2917:31;;;::::0;::::1;;2995:5;2966:34;;:25;2981:9;;2966:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2966:25:0;;;;;;:14;:25::i;:::-;:34;;;2958:43;;;::::0;::::1;;3029:30;3049:9;3029:15;;:19;;:30;;;;:::i;:::-;3011:15;:48;;;;3069:38;3081:10;3093:13;3069:11;:38::i;:::-;1401:1:6;2540:574:0::0;;;;;;:::o;2000:240:4:-;1297:12;:10;:12::i;:::-;1287:22;;:6;;;;;;;;;;;:22;;;1279:67;;;;;;;;;;;;;;;;;;;;;;2108:1:::1;2088:22;;:8;:22;;;;2080:73;;;;;;;;;;;;;;;;;;;;;;2197:8;2168:38;;2189:6;;;;;;;;;;;2168:38;;;;;;;;;;;;2225:8;2216:6;;:17;;;;;;;;;;;;;;;;;;2000:240:::0;:::o;598:104:3:-;651:15;685:10;678:17;;598:104;:::o;2059:117:6:-;1627:7;;;;;;;;;;;1619:40;;;;;;;;;;;;;;;;;;;;;;2127:5:::1;2117:7:::0;::::1;:15;;;;;;;;;;;;;;;;;;2147:22;2156:12;:10;:12::i;:::-;2147:22;;;;;;;;;;;;;;;2059:117::o:0;1812:115::-;1363:7;;;;;;;;;;;1362:8;1354:37;;;;;;;;;;;;;;;;;;;;;;1881:4:::1;1871:7;::::0;:14:::1;;;;;;;;;;;;;;;;;;1900:20;1907:12;:10;:12::i;:::-;1900:20;;;;;;;;;;;;;;;1812:115::o:0;1329:134:5:-;1387:7;1413:43;1417:1;1420;1413:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1406:50;;1329:134;;;;:::o;1694:431:0:-;1815:18;1831:1;1815:11;;:15;;:18;;;;:::i;:::-;1801:11;:32;;;;1871;1901:1;1871:10;:25;1882:13;1871:25;;;;;;;;;;;;;;;;:29;;:32;;;;:::i;:::-;1843:10;:25;1854:13;1843:25;;;;;;;;;;;;;;;:60;;;;1913:6;:21;1920:13;1913:21;;;;;;;;;;;;;;;1940:5;1913:33;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1913:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1985:4;1956:10;1967:5;:14;;;1956:26;;;;;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;2004:114;2035:13;2062:5;:14;;;2090:5;:18;;;2004:114;;;;;;;;;;;;;;;;;1694:431;;:::o;882:176:5:-;940:7;959:9;975:1;971;:5;959:17;;999:1;994;:6;;986:46;;;;;;;;;;;;;;;;;;;;;;1050:1;1043:8;;;882:176;;;;:::o;1754:187::-;1840:7;1872:1;1867;:6;;1875:12;1859:29;;;;;;;;;;;;;;;;;;;;;;;;;1898:9;1914:1;1910;:5;1898:17;;1933:1;1926:8;;;1754:187;;;;;:::o;430:560:1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;157:337;;;272:3;265:4;257:6;253:17;249:27;239:2;;290:1;287;280:12;239:2;323:6;310:20;300:30;;350:18;342:6;339:30;336:2;;;382:1;379;372:12;336:2;416:4;408:6;404:17;392:29;;467:3;459:4;451:6;447:17;437:8;433:32;430:41;427:2;;;484:1;481;474:12;427:2;232:262;;;;;;503:434;;601:3;594:4;586:6;582:17;578:27;568:2;;619:1;616;609:12;568:2;656:6;643:20;678:61;693:45;731:6;693:45;;;678:61;;;669:70;;759:6;752:5;745:21;795:4;787:6;783:17;828:4;821:5;817:16;863:3;854:6;849:3;845:16;842:25;839:2;;;880:1;877;870:12;839:2;890:41;924:6;919:3;914;890:41;;;561:376;;;;;;;;946:442;;1048:3;1041:4;1033:6;1029:17;1025:27;1015:2;;1066:1;1063;1056:12;1015:2;1103:6;1090:20;1125:65;1140:49;1182:6;1140:49;;;1125:65;;;1116:74;;1210:6;1203:5;1196:21;1246:4;1238:6;1234:17;1279:4;1272:5;1268:16;1314:3;1305:6;1300:3;1296:16;1293:25;1290:2;;;1331:1;1328;1321:12;1290:2;1341:41;1375:6;1370:3;1365;1341:41;;;1008:380;;;;;;;;1448:912;;1570:4;1558:9;1553:3;1549:19;1545:30;1542:2;;;1588:1;1585;1578:12;1542:2;1606:20;1621:4;1606:20;;;1597:29;;1709:1;1698:9;1694:17;1681:31;1732:18;1724:6;1721:30;1718:2;;;1764:1;1761;1754:12;1718:2;1799:55;1850:3;1841:6;1830:9;1826:22;1799:55;;;1792:4;1785:5;1781:16;1774:81;1636:230;1948:2;1937:9;1933:18;1920:32;1972:18;1964:6;1961:30;1958:2;;;2004:1;2001;1994:12;1958:2;2039:55;2090:3;2081:6;2070:9;2066:22;2039:55;;;2032:4;2025:5;2021:16;2014:81;1876:230;2192:2;2181:9;2177:18;2164:32;2216:18;2208:6;2205:30;2202:2;;;2248:1;2245;2238:12;2202:2;2283:55;2334:3;2325:6;2314:9;2310:22;2283:55;;;2276:4;2269:5;2265:16;2258:81;2116:234;1536:824;;;;;2367:130;;2447:6;2434:20;2425:29;;2459:33;2486:5;2459:33;;;2419:78;;;;;2504:241;;2608:2;2596:9;2587:7;2583:23;2579:32;2576:2;;;2624:1;2621;2614:12;2576:2;2659:1;2676:53;2721:7;2712:6;2701:9;2697:22;2676:53;;;2666:63;;2638:97;2570:175;;;;;2752:518;;;2906:2;2894:9;2885:7;2881:23;2877:32;2874:2;;;2922:1;2919;2912:12;2874:2;2957:1;2974:53;3019:7;3010:6;2999:9;2995:22;2974:53;;;2964:63;;2936:97;3092:2;3081:9;3077:18;3064:32;3116:18;3108:6;3105:30;3102:2;;;3148:1;3145;3138:12;3102:2;3168:86;3246:7;3237:6;3226:9;3222:22;3168:86;;;3158:96;;3043:217;2868:402;;;;;;3277:869;;;;;;;3475:2;3463:9;3454:7;3450:23;3446:32;3443:2;;;3491:1;3488;3481:12;3443:2;3554:1;3543:9;3539:17;3526:31;3577:18;3569:6;3566:30;3563:2;;;3609:1;3606;3599:12;3563:2;3637:65;3694:7;3685:6;3674:9;3670:22;3637:65;;;3627:75;;;;3505:203;3767:2;3756:9;3752:18;3739:32;3791:18;3783:6;3780:30;3777:2;;;3823:1;3820;3813:12;3777:2;3851:65;3908:7;3899:6;3888:9;3884:22;3851:65;;;3841:75;;;;3718:204;3981:2;3970:9;3966:18;3953:32;4005:18;3997:6;3994:30;3991:2;;;4037:1;4034;4027:12;3991:2;4065:65;4122:7;4113:6;4102:9;4098:22;4065:65;;;4055:75;;;;3932:204;3437:709;;;;;;;;;4153:347;;4267:2;4255:9;4246:7;4242:23;4238:32;4235:2;;;4283:1;4280;4273:12;4235:2;4346:1;4335:9;4331:17;4318:31;4369:18;4361:6;4358:30;4355:2;;;4401:1;4398;4391:12;4355:2;4421:63;4476:7;4467:6;4456:9;4452:22;4421:63;;;4411:73;;4297:193;4229:271;;;;;4507:241;;4611:2;4599:9;4590:7;4586:23;4582:32;4579:2;;;4627:1;4624;4617:12;4579:2;4662:1;4679:53;4724:7;4715:6;4704:9;4700:22;4679:53;;;4669:63;;4641:97;4573:175;;;;;4756:273;;4915:108;5019:3;5011:6;4915:108;;;4901:122;;4894:135;;;;;5037:142;5128:45;5167:5;5128:45;;;5123:3;5116:58;5110:69;;;5186:113;5269:24;5287:5;5269:24;;;5264:3;5257:37;5251:48;;;5413:1080;;5616:83;5693:5;5616:83;;;5712:115;5820:6;5815:3;5712:115;;;5705:122;;5850:3;5892:4;5884:6;5880:17;5875:3;5871:27;5919:85;5998:5;5919:85;;;6024:7;6052:1;6037:417;6062:6;6059:1;6056:13;6037:417;;;6124:9;6118:4;6114:20;6109:3;6102:33;6169:6;6163:13;6191:122;6308:4;6293:13;6191:122;;;6183:130;;6330:89;6412:6;6330:89;;;6320:99;;6442:4;6437:3;6433:14;6426:21;;6094:360;6084:1;6081;6077:9;6072:14;;6037:417;;;6041:14;6467:4;6460:11;;6484:3;6477:10;;5595:898;;;;;;;;;;6501:104;6578:21;6593:5;6578:21;;;6573:3;6566:34;6560:45;;;6612:347;;6724:39;6757:5;6724:39;;;6775:71;6839:6;6834:3;6775:71;;;6768:78;;6851:52;6896:6;6891:3;6884:4;6877:5;6873:16;6851:52;;;6924:29;6946:6;6924:29;;;6919:3;6915:39;6908:46;;6704:255;;;;;;6966:360;;7096:39;7129:5;7096:39;;;7147:89;7229:6;7224:3;7147:89;;;7140:96;;7241:52;7286:6;7281:3;7274:4;7267:5;7263:16;7241:52;;;7314:6;7309:3;7305:16;7298:23;;7076:250;;;;;;7333:319;;7431:35;7460:5;7431:35;;;7478:61;7532:6;7527:3;7478:61;;;7471:68;;7544:52;7589:6;7584:3;7577:4;7570:5;7566:16;7544:52;;;7617:29;7639:6;7617:29;;;7612:3;7608:39;7601:46;;7411:241;;;;;;7659:339;;7767:35;7796:5;7767:35;;;7814:71;7878:6;7873:3;7814:71;;;7807:78;;7890:52;7935:6;7930:3;7923:4;7916:5;7912:16;7890:52;;;7963:29;7985:6;7963:29;;;7958:3;7954:39;7947:46;;7747:251;;;;;;8005:352;;8131:35;8160:5;8131:35;;;8178:89;8260:6;8255:3;8178:89;;;8171:96;;8272:52;8317:6;8312:3;8305:4;8298:5;8294:16;8272:52;;;8345:6;8340:3;8336:16;8329:23;;8111:246;;;;;;8365:320;;8525:67;8589:2;8584:3;8525:67;;;8518:74;;8625:22;8621:1;8616:3;8612:11;8605:43;8676:2;8671:3;8667:12;8660:19;;8511:174;;;;8694:375;;8854:67;8918:2;8913:3;8854:67;;;8847:74;;8954:34;8950:1;8945:3;8941:11;8934:55;9023:8;9018:2;9013:3;9009:12;9002:30;9060:2;9055:3;9051:12;9044:19;;8840:229;;;;9078:327;;9238:67;9302:2;9297:3;9238:67;;;9231:74;;9338:29;9334:1;9329:3;9325:11;9318:50;9396:2;9391:3;9387:12;9380:19;;9224:181;;;;9414:316;;9574:67;9638:2;9633:3;9574:67;;;9567:74;;9674:18;9670:1;9665:3;9661:11;9654:39;9721:2;9716:3;9712:12;9705:19;;9560:170;;;;9739:332;;9899:67;9963:2;9958:3;9899:67;;;9892:74;;9999:34;9995:1;9990:3;9986:11;9979:55;10062:2;10057:3;10053:12;10046:19;;9885:186;;;;10180:884;;10333:4;10328:3;10324:14;10421:4;10414:5;10410:16;10404:23;10473:3;10467:4;10463:14;10456:4;10451:3;10447:14;10440:38;10493:69;10557:4;10543:12;10493:69;;;10485:77;;10353:221;10651:4;10644:5;10640:16;10634:23;10703:3;10697:4;10693:14;10686:4;10681:3;10677:14;10670:38;10723:69;10787:4;10773:12;10723:69;;;10715:77;;10584:220;10885:4;10878:5;10874:16;10868:23;10937:3;10931:4;10927:14;10920:4;10915:3;10911:14;10904:38;10957:69;11021:4;11007:12;10957:69;;;10949:77;;10814:224;11055:4;11048:11;;10306:758;;;;;;11071:113;11154:24;11172:5;11154:24;;;11149:3;11142:37;11136:48;;;11191:258;;11333:91;11420:3;11411:6;11333:91;;;11326:98;;11441:3;11434:10;;11314:135;;;;;11456:266;;11602:95;11693:3;11684:6;11602:95;;;11595:102;;11714:3;11707:10;;11583:139;;;;;11729:213;;11847:2;11836:9;11832:18;11824:26;;11861:71;11929:1;11918:9;11914:17;11905:6;11861:71;;;11818:124;;;;;11949:229;;12075:2;12064:9;12060:18;12052:26;;12089:79;12165:1;12154:9;12150:17;12141:6;12089:79;;;12046:132;;;;;12185:340;;12339:2;12328:9;12324:18;12316:26;;12353:79;12429:1;12418:9;12414:17;12405:6;12353:79;;;12443:72;12511:2;12500:9;12496:18;12487:6;12443:72;;;12310:215;;;;;;12532:595;;12738:2;12727:9;12723:18;12715:26;;12752:71;12820:1;12809:9;12805:17;12796:6;12752:71;;;12871:9;12865:4;12861:20;12856:2;12845:9;12841:18;12834:48;12896:74;12965:4;12956:6;12896:74;;;12888:82;;13018:9;13012:4;13008:20;13003:2;12992:9;12988:18;12981:48;13043:74;13112:4;13103:6;13043:74;;;13035:82;;12709:418;;;;;;;13134:477;;13360:2;13349:9;13345:18;13337:26;;13410:9;13404:4;13400:20;13396:1;13385:9;13381:17;13374:47;13435:166;13596:4;13587:6;13435:166;;;13427:174;;13331:280;;;;;13618:201;;13730:2;13719:9;13715:18;13707:26;;13744:65;13806:1;13795:9;13791:17;13782:6;13744:65;;;13701:118;;;;;13826:301;;13964:2;13953:9;13949:18;13941:26;;14014:9;14008:4;14004:20;14000:1;13989:9;13985:17;13978:47;14039:78;14112:4;14103:6;14039:78;;;14031:86;;13935:192;;;;;14134:407;;14325:2;14314:9;14310:18;14302:26;;14375:9;14369:4;14365:20;14361:1;14350:9;14346:17;14339:47;14400:131;14526:4;14400:131;;;14392:139;;14296:245;;;;14548:407;;14739:2;14728:9;14724:18;14716:26;;14789:9;14783:4;14779:20;14775:1;14764:9;14760:17;14753:47;14814:131;14940:4;14814:131;;;14806:139;;14710:245;;;;14962:407;;15153:2;15142:9;15138:18;15130:26;;15203:9;15197:4;15193:20;15189:1;15178:9;15174:17;15167:47;15228:131;15354:4;15228:131;;;15220:139;;15124:245;;;;15376:407;;15567:2;15556:9;15552:18;15544:26;;15617:9;15611:4;15607:20;15603:1;15592:9;15588:17;15581:47;15642:131;15768:4;15642:131;;;15634:139;;15538:245;;;;15790:407;;15981:2;15970:9;15966:18;15958:26;;16031:9;16025:4;16021:20;16017:1;16006:9;16002:17;15995:47;16056:131;16182:4;16056:131;;;16048:139;;15952:245;;;;16204:213;;16322:2;16311:9;16307:18;16299:26;;16336:71;16404:1;16393:9;16389:17;16380:6;16336:71;;;16293:124;;;;;16424:256;;16486:2;16480:9;16470:19;;16524:4;16516:6;16512:17;16623:6;16611:10;16608:22;16587:18;16575:10;16572:34;16569:62;16566:2;;;16644:1;16641;16634:12;16566:2;16664:10;16660:2;16653:22;16464:216;;;;;16687:318;;16827:18;16819:6;16816:30;16813:2;;;16859:1;16856;16849:12;16813:2;16926:4;16922:9;16915:4;16907:6;16903:17;16899:33;16891:41;;16990:4;16984;16980:15;16972:23;;16750:255;;;;17012:322;;17156:18;17148:6;17145:30;17142:2;;;17188:1;17185;17178:12;17142:2;17255:4;17251:9;17244:4;17236:6;17232:17;17228:33;17220:41;;17319:4;17313;17309:15;17301:23;;17079:255;;;;17341:180;;17456:3;17448:11;;17494:4;17489:3;17485:14;17477:22;;17442:79;;;;17528:166;;17666:5;17660:12;17650:22;;17631:63;;;;17701:118;;17791:5;17785:12;17775:22;;17756:63;;;;17826:122;;17920:5;17914:12;17904:22;;17885:63;;;;17955:137;;18082:4;18077:3;18073:14;18065:22;;18059:33;;;;18100:207;;18259:6;18254:3;18247:19;18296:4;18291:3;18287:14;18272:29;;18240:67;;;;;18316:153;;18421:6;18416:3;18409:19;18458:4;18453:3;18449:14;18434:29;;18402:67;;;;;18478:163;;18593:6;18588:3;18581:19;18630:4;18625:3;18621:14;18606:29;;18574:67;;;;;18650:145;;18786:3;18771:18;;18764:31;;;;;18803:91;;18865:24;18883:5;18865:24;;;18854:35;;18848:46;;;;18901:85;;18974:5;18967:13;18960:21;18949:32;;18943:43;;;;18993:121;;19066:42;19059:5;19055:54;19044:65;;19038:76;;;;19121:72;;19183:5;19172:16;;19166:27;;;;19200:129;;19287:37;19318:5;19287:37;;;19274:50;;19268:61;;;;19336:121;;19415:37;19446:5;19415:37;;;19402:50;;19396:61;;;;19464:108;;19543:24;19561:5;19543:24;;;19530:37;;19524:48;;;;19580:145;19661:6;19656:3;19651;19638:30;19717:1;19708:6;19703:3;19699:16;19692:27;19631:94;;;;19734:268;19799:1;19806:101;19820:6;19817:1;19814:13;19806:101;;;19896:1;19891:3;19887:11;19881:18;19877:1;19872:3;19868:11;19861:39;19842:2;19839:1;19835:10;19830:15;;19806:101;;;19922:6;19919:1;19916:13;19913:2;;;19987:1;19978:6;19973:3;19969:16;19962:27;19913:2;19783:219;;;;;20010:97;;20098:2;20094:7;20089:2;20082:5;20078:14;20074:28;20064:38;;20058:49;;;;20115:117;20184:24;20202:5;20184:24;;;20177:5;20174:35;20164:2;;20223:1;20220;20213:12;20164:2;20158:74;;20239:117;20308:24;20326:5;20308:24;;;20301:5;20298:35;20288:2;;20347:1;20344;20337:12;20288:2;20282:74;",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.0 <0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./IPFSProofOfExistence.sol\";\n\n/// @title A contract which inherits from IPFSProofOfExistence contract\n/// @author Stanislav Trenev\n/// @notice The contract exposes a testable public function, which is internal in the original contract\n/// @dev This contract is entirely for testing purposes, so not use in production\ncontract IPFSProofOfExistenceTestable is IPFSProofOfExistence {\n    constructor() public {}\n\n    /// @notice Function which performs the actual storing of proofs in the state and logs an event\n    /// @dev Function used only for testing purposes\n    /// @param documentOwner The address of the document owner\n    /// @param proof Struct entity containing the documentOwner address, ipfs hash and document type\n    function storeProof(address documentOwner, DocumentReference memory proof)\n        public\n    {\n        _storeProof(documentOwner, proof);\n    }\n}\n",
  "sourcePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
  "ast": {
    "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
    "exportedSymbols": {
      "IPFSProofOfExistenceTestable": [
        279
      ]
    },
    "id": 280,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 257,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:31:1"
      },
      {
        "id": 258,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "71:33:1"
      },
      {
        "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol",
        "file": "./IPFSProofOfExistence.sol",
        "id": 259,
        "nodeType": "ImportDirective",
        "scope": 280,
        "sourceUnit": 256,
        "src": "105:36:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 260,
              "name": "IPFSProofOfExistence",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 255,
              "src": "471:20:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPFSProofOfExistence_$255",
                "typeString": "contract IPFSProofOfExistence"
              }
            },
            "id": 261,
            "nodeType": "InheritanceSpecifier",
            "src": "471:20:1"
          }
        ],
        "contractDependencies": [
          255,
          339,
          442,
          710
        ],
        "contractKind": "contract",
        "documentation": "@title A contract which inherits from IPFSProofOfExistence contract\n @author Stanislav Trenev\n @notice The contract exposes a testable public function, which is internal in the original contract\n @dev This contract is entirely for testing purposes, so not use in production",
        "fullyImplemented": true,
        "id": 279,
        "linearizedBaseContracts": [
          279,
          255,
          442,
          710,
          339
        ],
        "name": "IPFSProofOfExistenceTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 264,
              "nodeType": "Block",
              "src": "519:2:1",
              "statements": []
            },
            "documentation": null,
            "id": 265,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 262,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "509:2:1"
            },
            "returnParameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "519:0:1"
            },
            "scope": 279,
            "src": "498:23:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 277,
              "nodeType": "Block",
              "src": "938:50:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 273,
                        "name": "documentOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 267,
                        "src": "960:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 274,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 269,
                        "src": "975:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      ],
                      "id": 272,
                      "name": "_storeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 105,
                      "src": "948:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_DocumentReference_$19_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IPFSProofOfExistence.DocumentReference memory)"
                      }
                    },
                    "id": 275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:33:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 276,
                  "nodeType": "ExpressionStatement",
                  "src": "948:33:1"
                }
              ]
            },
            "documentation": "@notice Function which performs the actual storing of proofs in the state and logs an event\n @dev Function used only for testing purposes\n @param documentOwner The address of the document owner\n @param proof Struct entity containing the documentOwner address, ipfs hash and document type",
            "functionSelector": "e757da12",
            "id": 278,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "storeProof",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 267,
                  "name": "documentOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 278,
                  "src": "864:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 266,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "864:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 269,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 278,
                  "src": "887:30:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                    "typeString": "struct IPFSProofOfExistence.DocumentReference"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 268,
                    "name": "DocumentReference",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 19,
                    "src": "887:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DocumentReference_$19_storage_ptr",
                      "typeString": "struct IPFSProofOfExistence.DocumentReference"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "863:55:1"
            },
            "returnParameters": {
              "id": 271,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:1"
            },
            "scope": 279,
            "src": "844:144:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 280,
        "src": "430:560:1"
      }
    ],
    "src": "39:952:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
    "exportedSymbols": {
      "IPFSProofOfExistenceTestable": [
        279
      ]
    },
    "id": 280,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 257,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:31:1"
      },
      {
        "id": 258,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "71:33:1"
      },
      {
        "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol",
        "file": "./IPFSProofOfExistence.sol",
        "id": 259,
        "nodeType": "ImportDirective",
        "scope": 280,
        "sourceUnit": 256,
        "src": "105:36:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 260,
              "name": "IPFSProofOfExistence",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 255,
              "src": "471:20:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPFSProofOfExistence_$255",
                "typeString": "contract IPFSProofOfExistence"
              }
            },
            "id": 261,
            "nodeType": "InheritanceSpecifier",
            "src": "471:20:1"
          }
        ],
        "contractDependencies": [
          255,
          339,
          442,
          710
        ],
        "contractKind": "contract",
        "documentation": "@title A contract which inherits from IPFSProofOfExistence contract\n @author Stanislav Trenev\n @notice The contract exposes a testable public function, which is internal in the original contract\n @dev This contract is entirely for testing purposes, so not use in production",
        "fullyImplemented": true,
        "id": 279,
        "linearizedBaseContracts": [
          279,
          255,
          442,
          710,
          339
        ],
        "name": "IPFSProofOfExistenceTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 264,
              "nodeType": "Block",
              "src": "519:2:1",
              "statements": []
            },
            "documentation": null,
            "id": 265,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 262,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "509:2:1"
            },
            "returnParameters": {
              "id": 263,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "519:0:1"
            },
            "scope": 279,
            "src": "498:23:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 277,
              "nodeType": "Block",
              "src": "938:50:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 273,
                        "name": "documentOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 267,
                        "src": "960:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 274,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 269,
                        "src": "975:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      ],
                      "id": 272,
                      "name": "_storeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 105,
                      "src": "948:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_DocumentReference_$19_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IPFSProofOfExistence.DocumentReference memory)"
                      }
                    },
                    "id": 275,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:33:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 276,
                  "nodeType": "ExpressionStatement",
                  "src": "948:33:1"
                }
              ]
            },
            "documentation": "@notice Function which performs the actual storing of proofs in the state and logs an event\n @dev Function used only for testing purposes\n @param documentOwner The address of the document owner\n @param proof Struct entity containing the documentOwner address, ipfs hash and document type",
            "functionSelector": "e757da12",
            "id": 278,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "storeProof",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 270,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 267,
                  "name": "documentOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 278,
                  "src": "864:21:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 266,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "864:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 269,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 278,
                  "src": "887:30:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DocumentReference_$19_memory_ptr",
                    "typeString": "struct IPFSProofOfExistence.DocumentReference"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 268,
                    "name": "DocumentReference",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 19,
                    "src": "887:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DocumentReference_$19_storage_ptr",
                      "typeString": "struct IPFSProofOfExistence.DocumentReference"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "863:55:1"
            },
            "returnParameters": {
              "id": 271,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:1"
            },
            "scope": 279,
            "src": "844:144:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 280,
        "src": "430:560:1"
      }
    ],
    "src": "39:952:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.0+commit.26b70077.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0xffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "name": "LogDocumentStored",
          "type": "event"
        },
        "0x734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "LogFundsWithdrawal",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        "0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xd35A3eD64bb6391eC234D53357eEb61C1C249bf1",
      "transactionHash": "0x6b6e2e073bf01806b25e67cc6daec3fb8e5695754c6e41ca86849385c0132dcc"
    },
    "1607639389557": {
      "events": {
        "0xffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "name": "LogDocumentStored",
          "type": "event"
        },
        "0x734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "LogFundsWithdrawal",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        "0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        }
      },
      "links": {},
      "address": "0x34e7CfA590E1c6158549D8a7ABfD5EB63E05E0aa",
      "transactionHash": "0x68c1c7283bb695c16f53956da19aa9591fffe2f3b4ecab1edfd2caa7bbd4e14b"
    }
  },
  "schemaVersion": "3.2.5",
  "updatedAt": "2020-12-10T22:30:45.833Z",
  "networkType": "ethereum",
  "devdoc": {
    "author": "Stanislav Trenev",
    "details": "This contract is entirely for testing purposes, so not use in production",
    "methods": {
      "checkDocumentsForAddress(address)": {
        "params": {
          "ownerAddress": "The address of the proof's owner"
        },
        "returns": {
          "_0": "array of proofs"
        }
      },
      "getNumberOfProofs(address)": {
        "params": {
          "ownerAddress": "The address of the proof's owner"
        },
        "returns": {
          "_0": "number of proofs"
        }
      },
      "ipfsHashExists(string)": {
        "params": {
          "ipfsHash": "The ipfs hash we are checking"
        },
        "returns": {
          "_0": "boolean if the hash is already stored"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "saveProofOfExistence(string,string,string)": {
        "details": "External function which is executed when the contract is not paused",
        "params": {
          "_documentType": "The document type of the stored document",
          "_ipfsHash": "The ipfs hash of the stored document",
          "_timeStamp": "The timestamp of the stored document"
        }
      },
      "storeProof(address,(string,string,string))": {
        "details": "Function used only for testing purposes",
        "params": {
          "documentOwner": "The address of the document owner",
          "proof": "Struct entity containing the documentOwner address, ipfs hash and document type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBalance(uint256)": {
        "params": {
          "withdrawAmount": "The amount to withdraw by the owner of the contract"
        }
      }
    },
    "title": "A contract which inherits from IPFSProofOfExistence contract"
  },
  "userdoc": {
    "methods": {
      "checkDocumentsForAddress(address)": {
        "notice": "View function to get stored documents for specific address"
      },
      "getNumberOfProofs(address)": {
        "notice": "View function to get number of proofs for specific address"
      },
      "getTotalProofs()": {
        "notice": "View function to get the total number of proofs stored by the contract"
      },
      "ipfsHashExists(string)": {
        "notice": "Function to check whether an ipfs hash already exists"
      },
      "pause()": {
        "notice": "Function to pause the contract"
      },
      "saveProofOfExistence(string,string,string)": {
        "notice": "Payable function which is called externaly to store a proof. The sender should send ether along with the transaction"
      },
      "storeProof(address,(string,string,string))": {
        "notice": "Function which performs the actual storing of proofs in the state and logs an event"
      },
      "unpause()": {
        "notice": "Function to unpause the contract"
      },
      "withdrawBalance(uint256)": {
        "notice": "Function to withdraw ether stored in the contract, agreggated from fees"
      }
    },
    "notice": "The contract exposes a testable public function, which is internal in the original contract"
  }
}