{
  "contractName": "IPFSProofOfExistenceTestable",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "documentType",
          "type": "string"
        }
      ],
      "name": "LogDocumentStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogFundsWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "checkDocumentsForAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "timeStamp",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "internalType": "struct IPFSProofOfExistence.DocumentReference[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "getNumberOfProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalProofs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        }
      ],
      "name": "ipfsHashExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_timeStamp",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_documentType",
          "type": "string"
        }
      ],
      "name": "saveProofOfExistence",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "documentOwner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "timeStamp",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "internalType": "struct IPFSProofOfExistence.DocumentReference",
          "name": "proof",
          "type": "tuple"
        }
      ],
      "name": "storeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.0+commit.26b70077\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"name\":\"LogDocumentStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogFundsWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"checkDocumentsForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"internalType\":\"struct IPFSProofOfExistence.DocumentReference[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"getNumberOfProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalProofs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"ipfsHashExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_documentType\",\"type\":\"string\"}],\"name\":\"saveProofOfExistence\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"documentOwner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"timeStamp\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"documentType\",\"type\":\"string\"}],\"internalType\":\"struct IPFSProofOfExistence.DocumentReference\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"storeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stanislav Trenev\",\"details\":\"This contract is entirely for testing purposes, so not use in production\",\"methods\":{\"checkDocumentsForAddress(address)\":{\"params\":{\"ownerAddress\":\"The address of the proof's owner\"},\"returns\":{\"_0\":\"array of proofs\"}},\"getNumberOfProofs(address)\":{\"params\":{\"ownerAddress\":\"The address of the proof's owner\"},\"returns\":{\"_0\":\"number of proofs\"}},\"ipfsHashExists(string)\":{\"params\":{\"ipfsHash\":\"The ipfs hash we are checking\"},\"returns\":{\"_0\":\"boolean if the hash is already stored\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"saveProofOfExistence(string,string,string)\":{\"details\":\"External function which is executed when the contract is not paused\",\"params\":{\"_documentType\":\"The document type of the stored document\",\"_ipfsHash\":\"The ipfs hash of the stored document\",\"_timeStamp\":\"The timestamp of the stored document\"}},\"storeProof(address,(string,string,string))\":{\"details\":\"Function used only for testing purposes\",\"params\":{\"documentOwner\":\"The address of the document owner\",\"proof\":\"Struct entity containing the documentOwner address, ipfs hash and document type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBalance(uint256)\":{\"params\":{\"withdrawAmount\":\"The amount to withdraw by the owner of the contract\"}}},\"title\":\"A contract which inherits from IPFSProofOfExistence contract\"},\"userdoc\":{\"methods\":{\"checkDocumentsForAddress(address)\":{\"notice\":\"View function to get stored documents for specific address\"},\"getNumberOfProofs(address)\":{\"notice\":\"View function to get number of proofs for specific address\"},\"getTotalProofs()\":{\"notice\":\"View function to get the total number of proofs stored by the contract\"},\"ipfsHashExists(string)\":{\"notice\":\"Function to check whether an ipfs hash already exists\"},\"pause()\":{\"notice\":\"Function to pause the contract\"},\"saveProofOfExistence(string,string,string)\":{\"notice\":\"Payable function which is called externaly to store a proof. The sender should send ether along with the transaction\"},\"storeProof(address,(string,string,string))\":{\"notice\":\"Function which performs the actual storing of proofs in the state and logs an event\"},\"unpause()\":{\"notice\":\"Function to unpause the contract\"},\"withdrawBalance(uint256)\":{\"notice\":\"Function to withdraw ether stored in the contract, agreggated from fees\"}},\"notice\":\"The contract exposes a testable public function, which is internal in the original contract\"}},\"settings\":{\"compilationTarget\":{\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol\":\"IPFSProofOfExistenceTestable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/client/node_modules/@openzeppelin/contracts/GSN/Context.sol\":{\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"urls\":[\"bzz-raw://840b14ce0315c47d49ba328f1f9fa7654ded1c9e1559e6c5e777a7b2dc28bf0a\",\"dweb:/ipfs/QmTLLabn4wcfGro9LEmUXUN2nwKqZSotXMvjDCLXEnLtZP\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/client/node_modules/@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"urls\":[\"bzz-raw://8f9f711fb8d0d92aeea1c327e3845d13ca1fa8f142e47f8723cd5b3106fb29a3\",\"dweb:/ipfs/QmVQUReDW9f4zGqhizwHnyU8EntMs95tbASdqkGncnikba\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/client/node_modules/@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/client/node_modules/@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0x5d1b1dcbc0396f44c1c8d554857f71e3187503bf1e54062bf9ec6782e21f3a08\",\"urls\":[\"bzz-raw://9aa7fa580393aab7ca3d9f606f5ab7434d51e1c0f3632a593fca82c80ef8cc4c\",\"dweb:/ipfs/QmRy84N7QfkwBM2AeR7UB5G1PPHdRLi6s1iyzAwCzevcHe\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol\":{\"keccak256\":\"0xefc3c8b60e3c52c2a50e4c5f84322085936f17442790c3bb40306e803dc69565\",\"urls\":[\"bzz-raw://0d8d4a8048cc4589a959ec8ef6b7c70cbd9a1b2b5d3f0d9a95c5076d99ede5be\",\"dweb:/ipfs/QmZ22TqbCtF79mnS4WvVJhMyjXCnBwfA1T8MDPtTM2rMpR\"]},\"/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol\":{\"keccak256\":\"0x8b6478112b2b685c88745cd39ae81d6287d404d5be39a858dfbd36002a0d6f28\",\"urls\":[\"bzz-raw://ebb7e8ba1405e783d3bb38f8169c4766b81b680ed74ea9b8c7184a159c6168da\",\"dweb:/ipfs/QmRbnBPp5HSB49w6LhqTUZXrENQDKZM3jXLurX8edVtWX4\"]}},\"version\":1}",
  "bytecode": "0x608060405266038d7ea4c6800060025534801561001b57600080fd5b5060008060006101000a81548160ff02191690831515021790555060006100466100ea60201b60201c565b905080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100f2565b600033905090565b611e14806101016000396000f3fe6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063da76d5cd11610059578063da76d5cd14610244578063e757da121461026d578063ea15c38514610296578063f2fde38b146102b2576100c2565b80638da5cb5b146101b15780639b1bc0c9146101dc578063d6fc355f14610207576100c2565b80631a2110e6146100c75780633f4ba83a146101045780635c975abb1461011b578063715018a6146101465780637182ca471461015d5780638456cb591461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036036100e991908101906115f2565b6102db565b6040516100fb9190611ae6565b60405180910390f35b34801561011057600080fd5b50610119610310565b005b34801561012757600080fd5b506101306103b1565b60405161013d9190611ae6565b60405180910390f35b34801561015257600080fd5b5061015b6103c7565b005b34801561016957600080fd5b50610184600480360361017f91908101906114d1565b61051e565b6040516101919190611bc3565b60405180910390f35b3480156101a657600080fd5b506101af610567565b005b3480156101bd57600080fd5b506101c6610608565b6040516101d39190611a20565b60405180910390f35b3480156101e857600080fd5b506101f1610631565b6040516101fe9190611bc3565b60405180910390f35b34801561021357600080fd5b5061022e600480360361022991908101906114d1565b61063b565b60405161023b9190611ac4565b60405180910390f35b34801561025057600080fd5b5061026b60048036036102669190810190611633565b61090e565b005b34801561027957600080fd5b50610294600480360361028f91908101906114fa565b610a50565b005b6102b060048036036102ab919081019061154e565b610a5e565b005b3480156102be57600080fd5b506102d960048036036102d491908101906114d1565b610c38565b005b60006006826040516102ed9190611a09565b908152602001604051809103902060009054906101000a900460ff169050919050565b610318610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90611ba3565b60405180910390fd5b6103af610e07565b565b60008060009054906101000a900460ff16905090565b6103cf610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045590611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61056f610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611ba3565b60405180910390fd5b610606610eaf565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b60606000809054906101000a900460ff161561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b83565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109035783829060005260206000209060030201604051806060016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108eb5780601f106108c0576101008083540402835291602001916108eb565b820191906000526020600020905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050815260200190600101906106eb565b505050509050919050565b610916610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611ba3565b60405180910390fd5b600081116109b257600080fd5b6109c781600354610f5890919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b507f734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb3382604051610a45929190611a56565b60405180910390a150565b610a5a8282610fa2565b5050565b6000809054906101000a900460ff1615610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611b83565b60405180910390fd5b610ab5611247565b604051806060016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600254341015610bad57600080fd5b60001515610bfe86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102db565b151514610c0a57600080fd5b610c1f3460035461119790919063ffffffff16565b600381905550610c2f3382610fa2565b50505050505050565b610c40610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690611b43565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000809054906101000a900460ff16610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90611b23565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e98610dff565b604051610ea59190611a3b565b60405180910390a1565b6000809054906101000a900460ff1615610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef590611b83565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f41610dff565b604051610f4e9190611a3b565b60405180910390a1565b6000610f9a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ec565b905092915050565b610fb76001805461119790919063ffffffff16565b6001819055506110106001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119790919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906110d8929190611268565b5060208201518160010190805190602001906110f5929190611268565b506040820151816002019080519060200190611112929190611268565b50505060016006826020015160405161112b91906119f2565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892828260200151836040015160405161118b93929190611a7f565b60405180910390a15050565b6000808284019050838110156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990611b63565b60405180910390fd5b8091505092915050565b6000838311158290611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b9190611b01565b60405180910390fd5b5060008385039050809150509392505050565b60405180606001604052806060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112a957805160ff19168380011785556112d7565b828001600101855582156112d7579182015b828111156112d65782518255916020019190600101906112bb565b5b5090506112e491906112e8565b5090565b61130a91905b808211156113065760008160009055506001016112ee565b5090565b90565b60008135905061131c81611db0565b92915050565b60008083601f84011261133457600080fd5b8235905067ffffffffffffffff81111561134d57600080fd5b60208301915083600182028301111561136557600080fd5b9250929050565b600082601f83011261137d57600080fd5b813561139061138b82611c0b565b611bde565b915080825260208301602083018583830111156113ac57600080fd5b6113b7838284611d5d565b50505092915050565b600082601f8301126113d157600080fd5b81356113e46113df82611c37565b611bde565b9150808252602083016020830185838301111561140057600080fd5b61140b838284611d5d565b50505092915050565b60006060828403121561142657600080fd5b6114306060611bde565b9050600082013567ffffffffffffffff81111561144c57600080fd5b6114588482850161136c565b600083015250602082013567ffffffffffffffff81111561147857600080fd5b6114848482850161136c565b602083015250604082013567ffffffffffffffff8111156114a457600080fd5b6114b08482850161136c565b60408301525092915050565b6000813590506114cb81611dc7565b92915050565b6000602082840312156114e357600080fd5b60006114f18482850161130d565b91505092915050565b6000806040838503121561150d57600080fd5b600061151b8582860161130d565b925050602083013567ffffffffffffffff81111561153857600080fd5b61154485828601611414565b9150509250929050565b6000806000806000806060878903121561156757600080fd5b600087013567ffffffffffffffff81111561158157600080fd5b61158d89828a01611322565b9650965050602087013567ffffffffffffffff8111156115ac57600080fd5b6115b889828a01611322565b9450945050604087013567ffffffffffffffff8111156115d757600080fd5b6115e389828a01611322565b92509250509295509295509295565b60006020828403121561160457600080fd5b600082013567ffffffffffffffff81111561161e57600080fd5b61162a848285016113c0565b91505092915050565b60006020828403121561164557600080fd5b6000611653848285016114bc565b91505092915050565b60006116688383611985565b905092915050565b61167981611d27565b82525050565b61168881611cdf565b82525050565b600061169982611c73565b6116a38185611ca1565b9350836020820285016116b585611c63565b8060005b858110156116f157848403895281516116d2858261165c565b94506116dd83611c94565b925060208a019950506001810190506116b9565b50829750879550505050505092915050565b61170c81611cf1565b82525050565b600061171d82611c89565b6117278185611cc3565b9350611737818560208601611d6c565b61174081611d9f565b840191505092915050565b600061175682611c89565b6117608185611cd4565b9350611770818560208601611d6c565b80840191505092915050565b600061178782611c7e565b6117918185611cb2565b93506117a1818560208601611d6c565b6117aa81611d9f565b840191505092915050565b60006117c082611c7e565b6117ca8185611cc3565b93506117da818560208601611d6c565b6117e381611d9f565b840191505092915050565b60006117f982611c7e565b6118038185611cd4565b9350611813818560208601611d6c565b80840191505092915050565b600061182c601483611cc3565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061186c602683611cc3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118d2601b83611cc3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611912601083611cc3565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611952602083611cc3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060608301600083015184820360008601526119a2828261177c565b915050602083015184820360208601526119bc828261177c565b915050604083015184820360408601526119d6828261177c565b9150508091505092915050565b6119ec81611d1d565b82525050565b60006119fe82846117ee565b915081905092915050565b6000611a15828461174b565b915081905092915050565b6000602082019050611a35600083018461167f565b92915050565b6000602082019050611a506000830184611670565b92915050565b6000604082019050611a6b6000830185611670565b611a7860208301846119e3565b9392505050565b6000606082019050611a94600083018661167f565b8181036020830152611aa681856117b5565b90508181036040830152611aba81846117b5565b9050949350505050565b60006020820190508181036000830152611ade818461168e565b905092915050565b6000602082019050611afb6000830184611703565b92915050565b60006020820190508181036000830152611b1b8184611712565b905092915050565b60006020820190508181036000830152611b3c8161181f565b9050919050565b60006020820190508181036000830152611b5c8161185f565b9050919050565b60006020820190508181036000830152611b7c816118c5565b9050919050565b60006020820190508181036000830152611b9c81611905565b9050919050565b60006020820190508181036000830152611bbc81611945565b9050919050565b6000602082019050611bd860008301846119e3565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611c0157600080fd5b8060405250919050565b600067ffffffffffffffff821115611c2257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611c4e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cea82611cfd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d3282611d39565b9050919050565b6000611d4482611d4b565b9050919050565b6000611d5682611cfd565b9050919050565b82818337600083830152505050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b611db981611cdf565b8114611dc457600080fd5b50565b611dd081611d1d565b8114611ddb57600080fd5b5056fea2646970667358221220b906a36c4122484c13e5017a82d0a464d94efab6fe799c52e7c752fab139c7fe64736f6c63430006000033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638da5cb5b1161007f578063da76d5cd11610059578063da76d5cd14610244578063e757da121461026d578063ea15c38514610296578063f2fde38b146102b2576100c2565b80638da5cb5b146101b15780639b1bc0c9146101dc578063d6fc355f14610207576100c2565b80631a2110e6146100c75780633f4ba83a146101045780635c975abb1461011b578063715018a6146101465780637182ca471461015d5780638456cb591461019a575b600080fd5b3480156100d357600080fd5b506100ee60048036036100e991908101906115f2565b6102db565b6040516100fb9190611ae6565b60405180910390f35b34801561011057600080fd5b50610119610310565b005b34801561012757600080fd5b506101306103b1565b60405161013d9190611ae6565b60405180910390f35b34801561015257600080fd5b5061015b6103c7565b005b34801561016957600080fd5b50610184600480360361017f91908101906114d1565b61051e565b6040516101919190611bc3565b60405180910390f35b3480156101a657600080fd5b506101af610567565b005b3480156101bd57600080fd5b506101c6610608565b6040516101d39190611a20565b60405180910390f35b3480156101e857600080fd5b506101f1610631565b6040516101fe9190611bc3565b60405180910390f35b34801561021357600080fd5b5061022e600480360361022991908101906114d1565b61063b565b60405161023b9190611ac4565b60405180910390f35b34801561025057600080fd5b5061026b60048036036102669190810190611633565b61090e565b005b34801561027957600080fd5b50610294600480360361028f91908101906114fa565b610a50565b005b6102b060048036036102ab919081019061154e565b610a5e565b005b3480156102be57600080fd5b506102d960048036036102d491908101906114d1565b610c38565b005b60006006826040516102ed9190611a09565b908152602001604051809103902060009054906101000a900460ff169050919050565b610318610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90611ba3565b60405180910390fd5b6103af610e07565b565b60008060009054906101000a900460ff16905090565b6103cf610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461045e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045590611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61056f610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611ba3565b60405180910390fd5b610606610eaf565b565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600154905090565b60606000809054906101000a900460ff161561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611b83565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156109035783829060005260206000209060030201604051806060016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107a75780601f1061077c576101008083540402835291602001916107a7565b820191906000526020600020905b81548152906001019060200180831161078a57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108495780601f1061081e57610100808354040283529160200191610849565b820191906000526020600020905b81548152906001019060200180831161082c57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108eb5780601f106108c0576101008083540402835291602001916108eb565b820191906000526020600020905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050815260200190600101906106eb565b505050509050919050565b610916610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099c90611ba3565b60405180910390fd5b600081116109b257600080fd5b6109c781600354610f5890919063ffffffff16565b6003819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a13573d6000803e3d6000fd5b507f734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb3382604051610a45929190611a56565b60405180910390a150565b610a5a8282610fa2565b5050565b6000809054906101000a900460ff1615610aad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa490611b83565b60405180910390fd5b610ab5611247565b604051806060016040528088888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152509050600254341015610bad57600080fd5b60001515610bfe86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506102db565b151514610c0a57600080fd5b610c1f3460035461119790919063ffffffff16565b600381905550610c2f3382610fa2565b50505050505050565b610c40610dff565b73ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3690611b43565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000809054906101000a900460ff16610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90611b23565b60405180910390fd5b60008060006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610e98610dff565b604051610ea59190611a3b565b60405180910390a1565b6000809054906101000a900460ff1615610efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef590611b83565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f41610dff565b604051610f4e9190611a3b565b60405180910390a1565b6000610f9a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111ec565b905092915050565b610fb76001805461119790919063ffffffff16565b6001819055506110106001600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461119790919063ffffffff16565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906110d8929190611268565b5060208201518160010190805190602001906110f5929190611268565b506040820151816002019080519060200190611112929190611268565b50505060016006826020015160405161112b91906119f2565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507fffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892828260200151836040015160405161118b93929190611a7f565b60405180910390a15050565b6000808284019050838110156111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990611b63565b60405180910390fd5b8091505092915050565b6000838311158290611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122b9190611b01565b60405180910390fd5b5060008385039050809150509392505050565b60405180606001604052806060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106112a957805160ff19168380011785556112d7565b828001600101855582156112d7579182015b828111156112d65782518255916020019190600101906112bb565b5b5090506112e491906112e8565b5090565b61130a91905b808211156113065760008160009055506001016112ee565b5090565b90565b60008135905061131c81611db0565b92915050565b60008083601f84011261133457600080fd5b8235905067ffffffffffffffff81111561134d57600080fd5b60208301915083600182028301111561136557600080fd5b9250929050565b600082601f83011261137d57600080fd5b813561139061138b82611c0b565b611bde565b915080825260208301602083018583830111156113ac57600080fd5b6113b7838284611d5d565b50505092915050565b600082601f8301126113d157600080fd5b81356113e46113df82611c37565b611bde565b9150808252602083016020830185838301111561140057600080fd5b61140b838284611d5d565b50505092915050565b60006060828403121561142657600080fd5b6114306060611bde565b9050600082013567ffffffffffffffff81111561144c57600080fd5b6114588482850161136c565b600083015250602082013567ffffffffffffffff81111561147857600080fd5b6114848482850161136c565b602083015250604082013567ffffffffffffffff8111156114a457600080fd5b6114b08482850161136c565b60408301525092915050565b6000813590506114cb81611dc7565b92915050565b6000602082840312156114e357600080fd5b60006114f18482850161130d565b91505092915050565b6000806040838503121561150d57600080fd5b600061151b8582860161130d565b925050602083013567ffffffffffffffff81111561153857600080fd5b61154485828601611414565b9150509250929050565b6000806000806000806060878903121561156757600080fd5b600087013567ffffffffffffffff81111561158157600080fd5b61158d89828a01611322565b9650965050602087013567ffffffffffffffff8111156115ac57600080fd5b6115b889828a01611322565b9450945050604087013567ffffffffffffffff8111156115d757600080fd5b6115e389828a01611322565b92509250509295509295509295565b60006020828403121561160457600080fd5b600082013567ffffffffffffffff81111561161e57600080fd5b61162a848285016113c0565b91505092915050565b60006020828403121561164557600080fd5b6000611653848285016114bc565b91505092915050565b60006116688383611985565b905092915050565b61167981611d27565b82525050565b61168881611cdf565b82525050565b600061169982611c73565b6116a38185611ca1565b9350836020820285016116b585611c63565b8060005b858110156116f157848403895281516116d2858261165c565b94506116dd83611c94565b925060208a019950506001810190506116b9565b50829750879550505050505092915050565b61170c81611cf1565b82525050565b600061171d82611c89565b6117278185611cc3565b9350611737818560208601611d6c565b61174081611d9f565b840191505092915050565b600061175682611c89565b6117608185611cd4565b9350611770818560208601611d6c565b80840191505092915050565b600061178782611c7e565b6117918185611cb2565b93506117a1818560208601611d6c565b6117aa81611d9f565b840191505092915050565b60006117c082611c7e565b6117ca8185611cc3565b93506117da818560208601611d6c565b6117e381611d9f565b840191505092915050565b60006117f982611c7e565b6118038185611cd4565b9350611813818560208601611d6c565b80840191505092915050565b600061182c601483611cc3565b91507f5061757361626c653a206e6f74207061757365640000000000000000000000006000830152602082019050919050565b600061186c602683611cc3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006118d2601b83611cc3565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000611912601083611cc3565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000611952602083611cc3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060608301600083015184820360008601526119a2828261177c565b915050602083015184820360208601526119bc828261177c565b915050604083015184820360408601526119d6828261177c565b9150508091505092915050565b6119ec81611d1d565b82525050565b60006119fe82846117ee565b915081905092915050565b6000611a15828461174b565b915081905092915050565b6000602082019050611a35600083018461167f565b92915050565b6000602082019050611a506000830184611670565b92915050565b6000604082019050611a6b6000830185611670565b611a7860208301846119e3565b9392505050565b6000606082019050611a94600083018661167f565b8181036020830152611aa681856117b5565b90508181036040830152611aba81846117b5565b9050949350505050565b60006020820190508181036000830152611ade818461168e565b905092915050565b6000602082019050611afb6000830184611703565b92915050565b60006020820190508181036000830152611b1b8184611712565b905092915050565b60006020820190508181036000830152611b3c8161181f565b9050919050565b60006020820190508181036000830152611b5c8161185f565b9050919050565b60006020820190508181036000830152611b7c816118c5565b9050919050565b60006020820190508181036000830152611b9c81611905565b9050919050565b60006020820190508181036000830152611bbc81611945565b9050919050565b6000602082019050611bd860008301846119e3565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611c0157600080fd5b8060405250919050565b600067ffffffffffffffff821115611c2257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115611c4e57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611cea82611cfd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d3282611d39565b9050919050565b6000611d4482611d4b565b9050919050565b6000611d5682611cfd565b9050919050565b82818337600083830152505050565b60005b83811015611d8a578082015181840152602081019050611d6f565b83811115611d99576000848401525b50505050565b6000601f19601f8301169050919050565b611db981611cdf565b8114611dc457600080fd5b50565b611dd081611d1d565b8114611ddb57600080fd5b5056fea2646970667358221220b906a36c4122484c13e5017a82d0a464d94efab6fe799c52e7c752fab139c7fe64736f6c63430006000033",
  "sourceMap": "430:560:5:-:0;;;936:16:4;908:44;;498:23:5;8:9:-1;5:2;;;30:1;27;20:12;5:2;498:23:5;933:5:3;923:7;;:15;;;;;;;;;;;;;;;;;;865:17:1;885:12;:10;;;:12;;:::i;:::-;865:32;;916:9;907:6;;:18;;;;;;;;;;;;;;;;;;973:9;940:43;;969:1;940:43;;;;;;;;;;;;831:159;430:560:5;;590:104:0;643:15;677:10;670:17;;590:104;:::o;430:560:5:-;;;;;;;",
  "deployedSourceMap": "430:560:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4475:119:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4475:119:4;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3675:63;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3675:63:4;;;:::i;:::-;;1040:76:3;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1040:76:3;;;:::i;:::-;;;;;;;;;;;;;;;;1689:145:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1689:145:1;;;:::i;:::-;;3913:155:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3913:155:4;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;3561:59;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3561:59:4;;;:::i;:::-;;1066:77:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1066:77:1;;;:::i;:::-;;;;;;;;;;;;;;;;4200:91:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4200:91:4;;;:::i;:::-;;;;;;;;;;;;;;;;3309:199;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3309:199:4;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;4770:281;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4770:281:4;;;;;;;;;;;;;;;;:::i;:::-;;844:144:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;844:144:5;;;;;;;;;;;;;;;;:::i;:::-;;2561:574:4;;;;;;;;;;;;;;;;:::i;:::-;;1983:240:1;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1983:240:1;;;;;;;;;;;;;;;;:::i;:::-;;4475:119:4;4544:4;4567:10;4578:8;4567:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4560:27;;4475:119;;;:::o;3675:63::-;1280:12:1;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;3721:10:4::1;:8;:10::i;:::-;3675:63::o:0;1040:76:3:-;1079:4;1102:7;;;;;;;;;;;1095:14;;1040:76;:::o;1689:145:1:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;1795:1:::1;1758:40;;1779:6;;;;;;;;;;;1758:40;;;;;;;;;;;;1825:1;1808:6:::0;::::1;:19;;;;;;;;;;;;;;;;;;1689:145::o:0;3913:155:4:-;4007:7;4037:10;:24;4048:12;4037:24;;;;;;;;;;;;;;;;4030:31;;3913:155;;;:::o;3561:59::-;1280:12:1;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;3605:8:4::1;:6;:8::i;:::-;3561:59::o:0;1066:77:1:-;1104:7;1130:6;;;;;;;;;;;1123:13;;1066:77;:::o;4200:91:4:-;4247:7;4273:11;;4266:18;;4200:91;:::o;3309:199::-;3432:26;1346:7:3;;;;;;;;;;;1345:8;1337:37;;;;;;;;;;;;;;;;;;;;;;3481:6:4::1;:20;3488:12;3481:20;;;;;;;;;;;;;;;3474:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;3309:199:::0;;;:::o;4770:281::-;1280:12:1;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;4873:1:4::1;4856:14;:18;4848:27;;;::::0;::::1;;4903:35;4923:14;4903:15;;:19;;:35;;;;:::i;:::-;4885:15;:53;;;;4948:10;:19;;:35;4968:14;4948:35;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39::::0;24:38:::1;77:16;74:1;67:27;5:2;4948:35:4;4998:46;5017:10;5029:14;4998:46;;;;;;;;;;;;;;;;4770:281:::0;:::o;844:144:5:-;948:33;960:13;975:5;948:11;:33::i;:::-;844:144;;:::o;2561:574:4:-;1346:7:3;;;;;;;;;;;1345:8;1337:37;;;;;;;;;;;;;;;;;;;;;;2748:38:4::1;;:::i;:::-;2789:138;;;;;;;;2832:10;;2789:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2789:138:4;;;;;;;;;;2866:9;;2789:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2789:138:4;;;;;;;;;;2903:13;;2789:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2789:138:4;;;;;;;;::::0;2748:179:::1;;2959:9;;2946;:22;;2938:31;;;::::0;::::1;;3016:5;2987:34;;:25;3002:9;;2987:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2987:25:4;;;;;;:14;:25::i;:::-;:34;;;2979:43;;;::::0;::::1;;3050:30;3070:9;3050:15;;:19;;:30;;;;:::i;:::-;3032:15;:48;;;;3090:38;3102:10;3114:13;3090:11;:38::i;:::-;1384:1:3;2561:574:4::0;;;;;;:::o;1983:240:1:-;1280:12;:10;:12::i;:::-;1270:22;;:6;;;;;;;;;;;:22;;;1262:67;;;;;;;;;;;;;;;;;;;;;;2091:1:::1;2071:22;;:8;:22;;;;2063:73;;;;;;;;;;;;;;;;;;;;;;2180:8;2151:38;;2172:6;;;;;;;;;;;2151:38;;;;;;;;;;;;2208:8;2199:6;;:17;;;;;;;;;;;;;;;;;;1983:240:::0;:::o;590:104:0:-;643:15;677:10;670:17;;590:104;:::o;2042:117:3:-;1610:7;;;;;;;;;;;1602:40;;;;;;;;;;;;;;;;;;;;;;2110:5:::1;2100:7:::0;::::1;:15;;;;;;;;;;;;;;;;;;2130:22;2139:12;:10;:12::i;:::-;2130:22;;;;;;;;;;;;;;;2042:117::o:0;1795:115::-;1346:7;;;;;;;;;;;1345:8;1337:37;;;;;;;;;;;;;;;;;;;;;;1864:4:::1;1854:7;::::0;:14:::1;;;;;;;;;;;;;;;;;;1883:20;1890:12;:10;:12::i;:::-;1883:20;;;;;;;;;;;;;;;1795:115::o:0;1321:134:2:-;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1398:50;;1321:134;;;;:::o;1715:431:4:-;1836:18;1852:1;1836:11;;:15;;:18;;;;:::i;:::-;1822:11;:32;;;;1892;1922:1;1892:10;:25;1903:13;1892:25;;;;;;;;;;;;;;;;:29;;:32;;;;:::i;:::-;1864:10;:25;1875:13;1864:25;;;;;;;;;;;;;;;:60;;;;1934:6;:21;1941:13;1934:21;;;;;;;;;;;;;;;1961:5;1934:33;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;1934:33:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;2006:4;1977:10;1988:5;:14;;;1977:26;;;;;;;;;;;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;2025:114;2056:13;2083:5;:14;;;2111:5;:18;;;2025:114;;;;;;;;;;;;;;;;;1715:431;;:::o;874:176:2:-;932:7;951:9;967:1;963;:5;951:17;;991:1;986;:6;;978:46;;;;;;;;;;;;;;;;;;;;;;1042:1;1035:8;;;874:176;;;;:::o;1746:187::-;1832:7;1864:1;1859;:6;;1867:12;1851:29;;;;;;;;;;;;;;;;;;;;;;;;;1890:9;1906:1;1902;:5;1890:17;;1925:1;1918:8;;;1746:187;;;;;:::o;430:560:5:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;157:337;;;272:3;265:4;257:6;253:17;249:27;239:2;;290:1;287;280:12;239:2;323:6;310:20;300:30;;350:18;342:6;339:30;336:2;;;382:1;379;372:12;336:2;416:4;408:6;404:17;392:29;;467:3;459:4;451:6;447:17;437:8;433:32;430:41;427:2;;;484:1;481;474:12;427:2;232:262;;;;;;503:434;;601:3;594:4;586:6;582:17;578:27;568:2;;619:1;616;609:12;568:2;656:6;643:20;678:61;693:45;731:6;693:45;;;678:61;;;669:70;;759:6;752:5;745:21;795:4;787:6;783:17;828:4;821:5;817:16;863:3;854:6;849:3;845:16;842:25;839:2;;;880:1;877;870:12;839:2;890:41;924:6;919:3;914;890:41;;;561:376;;;;;;;;946:442;;1048:3;1041:4;1033:6;1029:17;1025:27;1015:2;;1066:1;1063;1056:12;1015:2;1103:6;1090:20;1125:65;1140:49;1182:6;1140:49;;;1125:65;;;1116:74;;1210:6;1203:5;1196:21;1246:4;1238:6;1234:17;1279:4;1272:5;1268:16;1314:3;1305:6;1300:3;1296:16;1293:25;1290:2;;;1331:1;1328;1321:12;1290:2;1341:41;1375:6;1370:3;1365;1341:41;;;1008:380;;;;;;;;1448:913;;1571:4;1559:9;1554:3;1550:19;1546:30;1543:2;;;1589:1;1586;1579:12;1543:2;1607:20;1622:4;1607:20;;;1598:29;;1710:1;1699:9;1695:17;1682:31;1733:18;1725:6;1722:30;1719:2;;;1765:1;1762;1755:12;1719:2;1800:55;1851:3;1842:6;1831:9;1827:22;1800:55;;;1793:4;1786:5;1782:16;1775:81;1637:230;1949:2;1938:9;1934:18;1921:32;1973:18;1965:6;1962:30;1959:2;;;2005:1;2002;1995:12;1959:2;2040:55;2091:3;2082:6;2071:9;2067:22;2040:55;;;2033:4;2026:5;2022:16;2015:81;1877:230;2193:2;2182:9;2178:18;2165:32;2217:18;2209:6;2206:30;2203:2;;;2249:1;2246;2239:12;2203:2;2284:55;2335:3;2326:6;2315:9;2311:22;2284:55;;;2277:4;2270:5;2266:16;2259:81;2117:234;1537:824;;;;;2368:130;;2448:6;2435:20;2426:29;;2460:33;2487:5;2460:33;;;2420:78;;;;;2505:241;;2609:2;2597:9;2588:7;2584:23;2580:32;2577:2;;;2625:1;2622;2615:12;2577:2;2660:1;2677:53;2722:7;2713:6;2702:9;2698:22;2677:53;;;2667:63;;2639:97;2571:175;;;;;2753:520;;;2908:2;2896:9;2887:7;2883:23;2879:32;2876:2;;;2924:1;2921;2914:12;2876:2;2959:1;2976:53;3021:7;3012:6;3001:9;2997:22;2976:53;;;2966:63;;2938:97;3094:2;3083:9;3079:18;3066:32;3118:18;3110:6;3107:30;3104:2;;;3150:1;3147;3140:12;3104:2;3170:87;3249:7;3240:6;3229:9;3225:22;3170:87;;;3160:97;;3045:218;2870:403;;;;;;3280:869;;;;;;;3478:2;3466:9;3457:7;3453:23;3449:32;3446:2;;;3494:1;3491;3484:12;3446:2;3557:1;3546:9;3542:17;3529:31;3580:18;3572:6;3569:30;3566:2;;;3612:1;3609;3602:12;3566:2;3640:65;3697:7;3688:6;3677:9;3673:22;3640:65;;;3630:75;;;;3508:203;3770:2;3759:9;3755:18;3742:32;3794:18;3786:6;3783:30;3780:2;;;3826:1;3823;3816:12;3780:2;3854:65;3911:7;3902:6;3891:9;3887:22;3854:65;;;3844:75;;;;3721:204;3984:2;3973:9;3969:18;3956:32;4008:18;4000:6;3997:30;3994:2;;;4040:1;4037;4030:12;3994:2;4068:65;4125:7;4116:6;4105:9;4101:22;4068:65;;;4058:75;;;;3935:204;3440:709;;;;;;;;;4156:347;;4270:2;4258:9;4249:7;4245:23;4241:32;4238:2;;;4286:1;4283;4276:12;4238:2;4349:1;4338:9;4334:17;4321:31;4372:18;4364:6;4361:30;4358:2;;;4404:1;4401;4394:12;4358:2;4424:63;4479:7;4470:6;4459:9;4455:22;4424:63;;;4414:73;;4300:193;4232:271;;;;;4510:241;;4614:2;4602:9;4593:7;4589:23;4585:32;4582:2;;;4630:1;4627;4620:12;4582:2;4665:1;4682:53;4727:7;4718:6;4707:9;4703:22;4682:53;;;4672:63;;4644:97;4576:175;;;;;4759:277;;4920:110;5026:3;5018:6;4920:110;;;4906:124;;4899:137;;;;;5044:142;5135:45;5174:5;5135:45;;;5130:3;5123:58;5117:69;;;5193:113;5276:24;5294:5;5276:24;;;5271:3;5264:37;5258:48;;;5420:1088;;5625:84;5703:5;5625:84;;;5722:116;5831:6;5826:3;5722:116;;;5715:123;;5861:3;5903:4;5895:6;5891:17;5886:3;5882:27;5930:86;6010:5;5930:86;;;6036:7;6064:1;6049:420;6074:6;6071:1;6068:13;6049:420;;;6136:9;6130:4;6126:20;6121:3;6114:33;6181:6;6175:13;6203:124;6322:4;6307:13;6203:124;;;6195:132;;6344:90;6427:6;6344:90;;;6334:100;;6457:4;6452:3;6448:14;6441:21;;6106:363;6096:1;6093;6089:9;6084:14;;6049:420;;;6053:14;6482:4;6475:11;;6499:3;6492:10;;5604:904;;;;;;;;;;6516:104;6593:21;6608:5;6593:21;;;6588:3;6581:34;6575:45;;;6627:347;;6739:39;6772:5;6739:39;;;6790:71;6854:6;6849:3;6790:71;;;6783:78;;6866:52;6911:6;6906:3;6899:4;6892:5;6888:16;6866:52;;;6939:29;6961:6;6939:29;;;6934:3;6930:39;6923:46;;6719:255;;;;;;6981:360;;7111:39;7144:5;7111:39;;;7162:89;7244:6;7239:3;7162:89;;;7155:96;;7256:52;7301:6;7296:3;7289:4;7282:5;7278:16;7256:52;;;7329:6;7324:3;7320:16;7313:23;;7091:250;;;;;;7348:319;;7446:35;7475:5;7446:35;;;7493:61;7547:6;7542:3;7493:61;;;7486:68;;7559:52;7604:6;7599:3;7592:4;7585:5;7581:16;7559:52;;;7632:29;7654:6;7632:29;;;7627:3;7623:39;7616:46;;7426:241;;;;;;7674:339;;7782:35;7811:5;7782:35;;;7829:71;7893:6;7888:3;7829:71;;;7822:78;;7905:52;7950:6;7945:3;7938:4;7931:5;7927:16;7905:52;;;7978:29;8000:6;7978:29;;;7973:3;7969:39;7962:46;;7762:251;;;;;;8020:352;;8146:35;8175:5;8146:35;;;8193:89;8275:6;8270:3;8193:89;;;8186:96;;8287:52;8332:6;8327:3;8320:4;8313:5;8309:16;8287:52;;;8360:6;8355:3;8351:16;8344:23;;8126:246;;;;;;8380:320;;8540:67;8604:2;8599:3;8540:67;;;8533:74;;8640:22;8636:1;8631:3;8627:11;8620:43;8691:2;8686:3;8682:12;8675:19;;8526:174;;;;8709:375;;8869:67;8933:2;8928:3;8869:67;;;8862:74;;8969:34;8965:1;8960:3;8956:11;8949:55;9038:8;9033:2;9028:3;9024:12;9017:30;9075:2;9070:3;9066:12;9059:19;;8855:229;;;;9093:327;;9253:67;9317:2;9312:3;9253:67;;;9246:74;;9353:29;9349:1;9344:3;9340:11;9333:50;9411:2;9406:3;9402:12;9395:19;;9239:181;;;;9429:316;;9589:67;9653:2;9648:3;9589:67;;;9582:74;;9689:18;9685:1;9680:3;9676:11;9669:39;9736:2;9731:3;9727:12;9720:19;;9575:170;;;;9754:332;;9914:67;9978:2;9973:3;9914:67;;;9907:74;;10014:34;10010:1;10005:3;10001:11;9994:55;10077:2;10072:3;10068:12;10061:19;;9900:186;;;;10195:886;;10350:4;10345:3;10341:14;10438:4;10431:5;10427:16;10421:23;10490:3;10484:4;10480:14;10473:4;10468:3;10464:14;10457:38;10510:69;10574:4;10560:12;10510:69;;;10502:77;;10370:221;10668:4;10661:5;10657:16;10651:23;10720:3;10714:4;10710:14;10703:4;10698:3;10694:14;10687:38;10740:69;10804:4;10790:12;10740:69;;;10732:77;;10601:220;10902:4;10895:5;10891:16;10885:23;10954:3;10948:4;10944:14;10937:4;10932:3;10928:14;10921:38;10974:69;11038:4;11024:12;10974:69;;;10966:77;;10831:224;11072:4;11065:11;;10323:758;;;;;;11088:113;11171:24;11189:5;11171:24;;;11166:3;11159:37;11153:48;;;11208:258;;11350:91;11437:3;11428:6;11350:91;;;11343:98;;11458:3;11451:10;;11331:135;;;;;11473:266;;11619:95;11710:3;11701:6;11619:95;;;11612:102;;11731:3;11724:10;;11600:139;;;;;11746:213;;11864:2;11853:9;11849:18;11841:26;;11878:71;11946:1;11935:9;11931:17;11922:6;11878:71;;;11835:124;;;;;11966:229;;12092:2;12081:9;12077:18;12069:26;;12106:79;12182:1;12171:9;12167:17;12158:6;12106:79;;;12063:132;;;;;12202:340;;12356:2;12345:9;12341:18;12333:26;;12370:79;12446:1;12435:9;12431:17;12422:6;12370:79;;;12460:72;12528:2;12517:9;12513:18;12504:6;12460:72;;;12327:215;;;;;;12549:595;;12755:2;12744:9;12740:18;12732:26;;12769:71;12837:1;12826:9;12822:17;12813:6;12769:71;;;12888:9;12882:4;12878:20;12873:2;12862:9;12858:18;12851:48;12913:74;12982:4;12973:6;12913:74;;;12905:82;;13035:9;13029:4;13025:20;13020:2;13009:9;13005:18;12998:48;13060:74;13129:4;13120:6;13060:74;;;13052:82;;12726:418;;;;;;;13151:481;;13379:2;13368:9;13364:18;13356:26;;13429:9;13423:4;13419:20;13415:1;13404:9;13400:17;13393:47;13454:168;13617:4;13608:6;13454:168;;;13446:176;;13350:282;;;;;13639:201;;13751:2;13740:9;13736:18;13728:26;;13765:65;13827:1;13816:9;13812:17;13803:6;13765:65;;;13722:118;;;;;13847:301;;13985:2;13974:9;13970:18;13962:26;;14035:9;14029:4;14025:20;14021:1;14010:9;14006:17;13999:47;14060:78;14133:4;14124:6;14060:78;;;14052:86;;13956:192;;;;;14155:407;;14346:2;14335:9;14331:18;14323:26;;14396:9;14390:4;14386:20;14382:1;14371:9;14367:17;14360:47;14421:131;14547:4;14421:131;;;14413:139;;14317:245;;;;14569:407;;14760:2;14749:9;14745:18;14737:26;;14810:9;14804:4;14800:20;14796:1;14785:9;14781:17;14774:47;14835:131;14961:4;14835:131;;;14827:139;;14731:245;;;;14983:407;;15174:2;15163:9;15159:18;15151:26;;15224:9;15218:4;15214:20;15210:1;15199:9;15195:17;15188:47;15249:131;15375:4;15249:131;;;15241:139;;15145:245;;;;15397:407;;15588:2;15577:9;15573:18;15565:26;;15638:9;15632:4;15628:20;15624:1;15613:9;15609:17;15602:47;15663:131;15789:4;15663:131;;;15655:139;;15559:245;;;;15811:407;;16002:2;15991:9;15987:18;15979:26;;16052:9;16046:4;16042:20;16038:1;16027:9;16023:17;16016:47;16077:131;16203:4;16077:131;;;16069:139;;15973:245;;;;16225:213;;16343:2;16332:9;16328:18;16320:26;;16357:71;16425:1;16414:9;16410:17;16401:6;16357:71;;;16314:124;;;;;16445:256;;16507:2;16501:9;16491:19;;16545:4;16537:6;16533:17;16644:6;16632:10;16629:22;16608:18;16596:10;16593:34;16590:62;16587:2;;;16665:1;16662;16655:12;16587:2;16685:10;16681:2;16674:22;16485:216;;;;;16708:318;;16848:18;16840:6;16837:30;16834:2;;;16880:1;16877;16870:12;16834:2;16947:4;16943:9;16936:4;16928:6;16924:17;16920:33;16912:41;;17011:4;17005;17001:15;16993:23;;16771:255;;;;17033:322;;17177:18;17169:6;17166:30;17163:2;;;17209:1;17206;17199:12;17163:2;17276:4;17272:9;17265:4;17257:6;17253:17;17249:33;17241:41;;17340:4;17334;17330:15;17322:23;;17100:255;;;;17362:181;;17478:3;17470:11;;17516:4;17511:3;17507:14;17499:22;;17464:79;;;;17550:167;;17689:5;17683:12;17673:22;;17654:63;;;;17724:118;;17814:5;17808:12;17798:22;;17779:63;;;;17849:122;;17943:5;17937:12;17927:22;;17908:63;;;;17978:138;;18106:4;18101:3;18097:14;18089:22;;18083:33;;;;18124:208;;18284:6;18279:3;18272:19;18321:4;18316:3;18312:14;18297:29;;18265:67;;;;;18341:153;;18446:6;18441:3;18434:19;18483:4;18478:3;18474:14;18459:29;;18427:67;;;;;18503:163;;18618:6;18613:3;18606:19;18655:4;18650:3;18646:14;18631:29;;18599:67;;;;;18675:145;;18811:3;18796:18;;18789:31;;;;;18828:91;;18890:24;18908:5;18890:24;;;18879:35;;18873:46;;;;18926:85;;18999:5;18992:13;18985:21;18974:32;;18968:43;;;;19018:121;;19091:42;19084:5;19080:54;19069:65;;19063:76;;;;19146:72;;19208:5;19197:16;;19191:27;;;;19225:129;;19312:37;19343:5;19312:37;;;19299:50;;19293:61;;;;19361:121;;19440:37;19471:5;19440:37;;;19427:50;;19421:61;;;;19489:108;;19568:24;19586:5;19568:24;;;19555:37;;19549:48;;;;19605:145;19686:6;19681:3;19676;19663:30;19742:1;19733:6;19728:3;19724:16;19717:27;19656:94;;;;19759:268;19824:1;19831:101;19845:6;19842:1;19839:13;19831:101;;;19921:1;19916:3;19912:11;19906:18;19902:1;19897:3;19893:11;19886:39;19867:2;19864:1;19860:10;19855:15;;19831:101;;;19947:6;19944:1;19941:13;19938:2;;;20012:1;20003:6;19998:3;19994:16;19987:27;19938:2;19808:219;;;;;20035:97;;20123:2;20119:7;20114:2;20107:5;20103:14;20099:28;20089:38;;20083:49;;;;20140:117;20209:24;20227:5;20209:24;;;20202:5;20199:35;20189:2;;20248:1;20245;20238:12;20189:2;20183:74;;20264:117;20333:24;20351:5;20333:24;;;20326:5;20323:35;20313:2;;20372:1;20369;20362:12;20313:2;20307:74;",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.6.0 <0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./IPFSProofOfExistence.sol\";\n\n/// @title A contract which inherits from IPFSProofOfExistence contract\n/// @author Stanislav Trenev\n/// @notice The contract exposes a testable public function, which is internal in the original contract\n/// @dev This contract is entirely for testing purposes, so not use in production\ncontract IPFSProofOfExistenceTestable is IPFSProofOfExistence {\n    constructor() public {}\n\n    /// @notice Function which performs the actual storing of proofs in the state and logs an event\n    /// @dev Function used only for testing purposes\n    /// @param documentOwner The address of the document owner\n    /// @param proof Struct entity containing the documentOwner address, ipfs hash and document type\n    function storeProof(address documentOwner, DocumentReference memory proof)\n        public\n    {\n        _storeProof(documentOwner, proof);\n    }\n}\n",
  "sourcePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
  "ast": {
    "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
    "exportedSymbols": {
      "IPFSProofOfExistenceTestable": [
        673
      ]
    },
    "id": 674,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 651,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:31:5"
      },
      {
        "id": 652,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "71:33:5"
      },
      {
        "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol",
        "file": "./IPFSProofOfExistence.sol",
        "id": 653,
        "nodeType": "ImportDirective",
        "scope": 674,
        "sourceUnit": 650,
        "src": "105:36:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 654,
              "name": "IPFSProofOfExistence",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 649,
              "src": "471:20:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPFSProofOfExistence_$649",
                "typeString": "contract IPFSProofOfExistence"
              }
            },
            "id": 655,
            "nodeType": "InheritanceSpecifier",
            "src": "471:20:5"
          }
        ],
        "contractDependencies": [
          22,
          125,
          393,
          649
        ],
        "contractKind": "contract",
        "documentation": "@title A contract which inherits from IPFSProofOfExistence contract\n @author Stanislav Trenev\n @notice The contract exposes a testable public function, which is internal in the original contract\n @dev This contract is entirely for testing purposes, so not use in production",
        "fullyImplemented": true,
        "id": 673,
        "linearizedBaseContracts": [
          673,
          649,
          125,
          393,
          22
        ],
        "name": "IPFSProofOfExistenceTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 658,
              "nodeType": "Block",
              "src": "519:2:5",
              "statements": []
            },
            "documentation": null,
            "id": 659,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "509:2:5"
            },
            "returnParameters": {
              "id": 657,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "519:0:5"
            },
            "scope": 673,
            "src": "498:23:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 671,
              "nodeType": "Block",
              "src": "938:50:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 667,
                        "name": "documentOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 661,
                        "src": "960:13:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 668,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 663,
                        "src": "975:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      ],
                      "id": 666,
                      "name": "_storeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 499,
                      "src": "948:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_DocumentReference_$413_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IPFSProofOfExistence.DocumentReference memory)"
                      }
                    },
                    "id": 669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:33:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 670,
                  "nodeType": "ExpressionStatement",
                  "src": "948:33:5"
                }
              ]
            },
            "documentation": "@notice Function which performs the actual storing of proofs in the state and logs an event\n @dev Function used only for testing purposes\n @param documentOwner The address of the document owner\n @param proof Struct entity containing the documentOwner address, ipfs hash and document type",
            "functionSelector": "e757da12",
            "id": 672,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "storeProof",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 664,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 661,
                  "name": "documentOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 672,
                  "src": "864:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "864:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 663,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 672,
                  "src": "887:30:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                    "typeString": "struct IPFSProofOfExistence.DocumentReference"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 662,
                    "name": "DocumentReference",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 413,
                    "src": "887:17:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DocumentReference_$413_storage_ptr",
                      "typeString": "struct IPFSProofOfExistence.DocumentReference"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "863:55:5"
            },
            "returnParameters": {
              "id": 665,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:5"
            },
            "scope": 673,
            "src": "844:144:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 674,
        "src": "430:560:5"
      }
    ],
    "src": "39:952:5"
  },
  "legacyAST": {
    "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistenceTestable.sol",
    "exportedSymbols": {
      "IPFSProofOfExistenceTestable": [
        673
      ]
    },
    "id": 674,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 651,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:31:5"
      },
      {
        "id": 652,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "71:33:5"
      },
      {
        "absolutePath": "/Users/stanislavtrenev/Projects/ipfs-proof-of-existence/contracts/IPFSProofOfExistence.sol",
        "file": "./IPFSProofOfExistence.sol",
        "id": 653,
        "nodeType": "ImportDirective",
        "scope": 674,
        "sourceUnit": 650,
        "src": "105:36:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 654,
              "name": "IPFSProofOfExistence",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 649,
              "src": "471:20:5",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IPFSProofOfExistence_$649",
                "typeString": "contract IPFSProofOfExistence"
              }
            },
            "id": 655,
            "nodeType": "InheritanceSpecifier",
            "src": "471:20:5"
          }
        ],
        "contractDependencies": [
          22,
          125,
          393,
          649
        ],
        "contractKind": "contract",
        "documentation": "@title A contract which inherits from IPFSProofOfExistence contract\n @author Stanislav Trenev\n @notice The contract exposes a testable public function, which is internal in the original contract\n @dev This contract is entirely for testing purposes, so not use in production",
        "fullyImplemented": true,
        "id": 673,
        "linearizedBaseContracts": [
          673,
          649,
          125,
          393,
          22
        ],
        "name": "IPFSProofOfExistenceTestable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 658,
              "nodeType": "Block",
              "src": "519:2:5",
              "statements": []
            },
            "documentation": null,
            "id": 659,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "509:2:5"
            },
            "returnParameters": {
              "id": 657,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "519:0:5"
            },
            "scope": 673,
            "src": "498:23:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 671,
              "nodeType": "Block",
              "src": "938:50:5",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 667,
                        "name": "documentOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 661,
                        "src": "960:13:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 668,
                        "name": "proof",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 663,
                        "src": "975:5:5",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                          "typeString": "struct IPFSProofOfExistence.DocumentReference memory"
                        }
                      ],
                      "id": 666,
                      "name": "_storeProof",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 499,
                      "src": "948:11:5",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_struct$_DocumentReference_$413_memory_ptr_$returns$__$",
                        "typeString": "function (address,struct IPFSProofOfExistence.DocumentReference memory)"
                      }
                    },
                    "id": 669,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "948:33:5",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 670,
                  "nodeType": "ExpressionStatement",
                  "src": "948:33:5"
                }
              ]
            },
            "documentation": "@notice Function which performs the actual storing of proofs in the state and logs an event\n @dev Function used only for testing purposes\n @param documentOwner The address of the document owner\n @param proof Struct entity containing the documentOwner address, ipfs hash and document type",
            "functionSelector": "e757da12",
            "id": 672,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "storeProof",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 664,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 661,
                  "name": "documentOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 672,
                  "src": "864:21:5",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 660,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "864:7:5",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 663,
                  "name": "proof",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 672,
                  "src": "887:30:5",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_DocumentReference_$413_memory_ptr",
                    "typeString": "struct IPFSProofOfExistence.DocumentReference"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 662,
                    "name": "DocumentReference",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 413,
                    "src": "887:17:5",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_DocumentReference_$413_storage_ptr",
                      "typeString": "struct IPFSProofOfExistence.DocumentReference"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "863:55:5"
            },
            "returnParameters": {
              "id": 665,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "938:0:5"
            },
            "scope": 673,
            "src": "844:144:5",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 674,
        "src": "430:560:5"
      }
    ],
    "src": "39:952:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.0+commit.26b70077.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {
        "0xffff033d6b60d9baf0521dbae5574578d9f4992ccf00fabaa73cf557ffc22892": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "indexed": false,
              "internalType": "string",
              "name": "documentType",
              "type": "string"
            }
          ],
          "name": "LogDocumentStored",
          "type": "event"
        },
        "0x734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "accountAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "LogFundsWithdrawal",
          "type": "event"
        },
        "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        "0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa": {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        }
      },
      "links": {},
      "address": "0xd35A3eD64bb6391eC234D53357eEb61C1C249bf1",
      "transactionHash": "0x6b6e2e073bf01806b25e67cc6daec3fb8e5695754c6e41ca86849385c0132dcc"
    }
  },
  "schemaVersion": "3.2.5",
  "updatedAt": "2020-11-25T21:01:15.868Z",
  "devdoc": {
    "author": "Stanislav Trenev",
    "details": "This contract is entirely for testing purposes, so not use in production",
    "methods": {
      "checkDocumentsForAddress(address)": {
        "params": {
          "ownerAddress": "The address of the proof's owner"
        },
        "returns": {
          "_0": "array of proofs"
        }
      },
      "getNumberOfProofs(address)": {
        "params": {
          "ownerAddress": "The address of the proof's owner"
        },
        "returns": {
          "_0": "number of proofs"
        }
      },
      "ipfsHashExists(string)": {
        "params": {
          "ipfsHash": "The ipfs hash we are checking"
        },
        "returns": {
          "_0": "boolean if the hash is already stored"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "saveProofOfExistence(string,string,string)": {
        "details": "External function which is executed when the contract is not paused",
        "params": {
          "_documentType": "The document type of the stored document",
          "_ipfsHash": "The ipfs hash of the stored document",
          "_timeStamp": "The timestamp of the stored document"
        }
      },
      "storeProof(address,(string,string,string))": {
        "details": "Function used only for testing purposes",
        "params": {
          "documentOwner": "The address of the document owner",
          "proof": "Struct entity containing the documentOwner address, ipfs hash and document type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBalance(uint256)": {
        "params": {
          "withdrawAmount": "The amount to withdraw by the owner of the contract"
        }
      }
    },
    "title": "A contract which inherits from IPFSProofOfExistence contract"
  },
  "userdoc": {
    "methods": {
      "checkDocumentsForAddress(address)": {
        "notice": "View function to get stored documents for specific address"
      },
      "getNumberOfProofs(address)": {
        "notice": "View function to get number of proofs for specific address"
      },
      "getTotalProofs()": {
        "notice": "View function to get the total number of proofs stored by the contract"
      },
      "ipfsHashExists(string)": {
        "notice": "Function to check whether an ipfs hash already exists"
      },
      "pause()": {
        "notice": "Function to pause the contract"
      },
      "saveProofOfExistence(string,string,string)": {
        "notice": "Payable function which is called externaly to store a proof. The sender should send ether along with the transaction"
      },
      "storeProof(address,(string,string,string))": {
        "notice": "Function which performs the actual storing of proofs in the state and logs an event"
      },
      "unpause()": {
        "notice": "Function to unpause the contract"
      },
      "withdrawBalance(uint256)": {
        "notice": "Function to withdraw ether stored in the contract, agreggated from fees"
      }
    },
    "notice": "The contract exposes a testable public function, which is internal in the original contract"
  }
}